<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/2022/06133503.html"/>
      <url>/2022/06133503.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/0613undefined/1655105219831.png" class title="在排序数组中查找元素的第一个和最后一个位置"></em></p><p>解法:二分</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//二分找找到等于目标的值，在值的前半部分找第一个等于的，在值的后半部分找最后一个等于的。</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//目标值大于中间值，在右半部分</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                first <span class="token operator">=</span> <span class="token function">searchf</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>mid<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> <span class="token function">searchl</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>first<span class="token punctuation">,</span>last<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">searchf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//尽量在前半部分找</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">searchl</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//让中值等于后面那个，例如(2,3)中，target等于2,,就会陷入无限循环，我们需要让mid等于3来打破循环</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为在右侧找的，所以不可能小于target</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索旋转排序数组</title>
      <link href="/2022/061018593.html"/>
      <url>/2022/061018593.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p> <em><img src="/2022/061018593/1654847643037.png" class title="搜索旋转排序数组"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//中间值小于right，说明右半部分是有序的</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//target是否在有序的一半里</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长有效括号</title>
      <link href="/2022/060945075.html"/>
      <url>/2022/060945075.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/060945075/1654759026177.png" class title="最长有效括号"></em></p><p>解法1:栈</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// if(s.length() &lt;= 1 ) {</span>        <span class="token comment" spellcheck="true">//     return 0;</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//栈底放入一个-1来保证如果第一个元素是（时，栈底元素依旧表示有效括号的起点</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是（则直接放入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//如果是），先弹出一个，如果为空，说明没有匹配，那么将这个）的下标放入表示这个有效括号的起点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//没有可以匹配的</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//将这个右括号的下标作为最后一个没有被匹配的右括号</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//匹配到了。那么这个有括号的下标减去栈顶元素(也就是最后一个没有被匹配的括号)就是当前长度</span>                    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>i <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:动态规划</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//dp[i]表示以这个字符为结尾的有效长度，如果这个值是左括号，那么长度无效</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//'()'</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//((......))</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//配对</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                      max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下一个排列</title>
      <link href="/2022/060758926.html"/>
      <url>/2022/060758926.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/060758926/1654588325556.png" class title="下一个排列"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4202320</span>        <span class="token comment" spellcheck="true">//4203022</span>        <span class="token comment" spellcheck="true">//可以看出，如果从尾部看是逐渐升序的，那么这个尾部在序列中必然是最大的，例如320，他就是3和2和0中最大的，</span>        <span class="token comment" spellcheck="true">//所以如果需要一个更大的，就需要变他的上一个,让他和后面比他大的最小的交换，这样改变的幅度就最小</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当前值大于前一个数，就说明是降序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fast <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果没有找到，就说明是最大</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找后面比它大的最小数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> fast <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    slow <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>fast<span class="token punctuation">,</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// System.out.println(fast);</span>            <span class="token comment" spellcheck="true">// System.out.println(slow);</span>            <span class="token comment" spellcheck="true">//排序</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>fast <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>len <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span><span class="token keyword">int</span> tmp1<span class="token punctuation">,</span><span class="token keyword">int</span> tmp2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>tmp1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>tmp1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>tmp2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>tmp2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并k个升序链表</title>
      <link href="/2022/060564092.html"/>
      <url>/2022/060564092.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/060564092/1654397647637.png" class title="合并k个升序链表"></em></p><p>解法1:</p><p>归并:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeKLists</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>lists<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode <span class="token function">merge</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> lists<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">mergeTwo</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode <span class="token function">mergeTwo</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span>ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode res <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>括号生成</title>
      <link href="/2022/060338710.html"/>
      <url>/2022/060338710.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/060338710/1654243239106.png" class title="括号生成"></em></p><p>方法一：深度优先搜索</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每一次都可以选择放左括号和右括号，</span>        <span class="token comment" spellcheck="true">//要多少个字符,当前字符，左括号个数，右括号个数</span>        <span class="token function">recur</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> ll<span class="token punctuation">,</span><span class="token keyword">int</span> lr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//全部加完之后，左右括号数量不等，不可能有效</span>        <span class="token comment" spellcheck="true">//任意时刻右括号比左括号多，不可能有效</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll <span class="token operator">></span> n1<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">||</span> lr <span class="token operator">></span> n1<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> ll <span class="token operator">&lt;</span> lr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ll <span class="token operator">+</span> lr <span class="token operator">==</span> n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">recur</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>str <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">,</span>ll <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>lr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recur</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>str <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">,</span>ll<span class="token punctuation">,</span>lr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：动态规划</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有效的括号</title>
      <link href="/2022/053162460.html"/>
      <url>/2022/053162460.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/053162460/1653974496548.png" class title="有效的括号"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// System.out.println((int)'(');//40</span>        <span class="token comment" spellcheck="true">// System.out.println((int)')');//41</span>        <span class="token comment" spellcheck="true">// System.out.println((int)'{');//123</span>        <span class="token comment" spellcheck="true">// System.out.println((int)'}');//125</span>        <span class="token comment" spellcheck="true">// System.out.println((int)'[');//91</span>        <span class="token comment" spellcheck="true">// System.out.println((int)']');//93</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token string">'('</span><span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token string">'{'</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//我们让元素依次入栈，入栈时如果和栈顶元素相等，就一起出栈，如果括号有效的话，他们入栈是可以刚好全部出栈的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// System.out.println(stack.peek());</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//和相等并且前比后小</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> a <span class="token operator">||</span>tmp <span class="token operator">==</span> b<span class="token operator">||</span>tmp <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//相抵消</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//没有相抵消</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表的倒数第N个节点</title>
      <link href="/2022/053152002.html"/>
      <url>/2022/053152002.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/053152002/1653962360736.png" class title="删除链表的倒数第n个节点"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> deepSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nowdeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>        res <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// //链表，当前是第几个节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            deepSum<span class="token operator">++</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//到达倒数第n个的前一个</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> nowdeep <span class="token operator">+</span> n  <span class="token operator">&lt;</span> deepSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nowdeep<span class="token operator">++</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nowdeep <span class="token operator">+</span> n <span class="token operator">></span> deepSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//要删除的就是第一个</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>        <span class="token comment" spellcheck="true">//如果nowdeep+n不小于deepsum</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2:双指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode fast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//前面添加0节点以解决删除第一个的问题</span>        ListNode res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        slow <span class="token operator">=</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当fast来到了末尾之后一个的时候，slow到达了倒数第n个的前一个</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电话号码的字母组合</title>
      <link href="/2022/053024111.html"/>
      <url>/2022/053024111.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/053024111/1653875848088.png" class title="电话号码的字母组合"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>String digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>           List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">"mno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">"pqrs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">"tuv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">"wxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//四个参数分别为 所给字符串，现在走到了字符串的第几个字符，结果列表，上一次递归之后的字符</span>        <span class="token function">recur</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>list<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//字符串和到了第几位</span>    <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span>String digits<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">,</span>StringBuilder befStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//到了最后一位之后，也就是走完了，就证明是一个可行的，我们将上一次递归的结果添加到list中并返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// System.out.println(befStr);</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>befStr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//没有到最后一位</span>        <span class="token comment" spellcheck="true">//获得该数字对应的字符串</span>        String nowStr <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(nowStr);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nowStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建新的StringBuilder并将前一次的结果赋进去</span>            StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>befStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nowStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//走下一个位置</span>            <span class="token function">recur</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>list<span class="token punctuation">,</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三数之和</title>
      <link href="/2022/052716798.html"/>
      <url>/2022/052716798.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/052716798/1653641327881.png" class title="三数之和"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>   List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对nums进行排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        int left = 0;</span><span class="token comment" spellcheck="true">//        int mid = 1;</span><span class="token comment" spellcheck="true">//        int right = len - 1;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最左边的值大于零，则整体不可能出现三数之和为0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//去重</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//大于和小于</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">></span> mid <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">></span> mid <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//等于</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//去重</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> mid <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>right<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> mid <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// System.out.println(mid);</span>                    <span class="token comment" spellcheck="true">// System.out.println(right);</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        //固定left，在后边找</span><span class="token comment" spellcheck="true">//        while(left &lt; right) {</span><span class="token comment" spellcheck="true">//            while (mid &lt; right) {</span><span class="token comment" spellcheck="true">//                //大于</span><span class="token comment" spellcheck="true">//                if (mid &lt; right &amp;&amp; nums[left] + nums[mid] + nums[right] > 0) {</span><span class="token comment" spellcheck="true">//                    right--;</span><span class="token comment" spellcheck="true">//                }else</span><span class="token comment" spellcheck="true">//                    //小于</span><span class="token comment" spellcheck="true">//                    if (mid &lt; right &amp;&amp; nums[left] + nums[mid] + nums[right] &lt; 0) {</span><span class="token comment" spellcheck="true">//                        mid++;</span><span class="token comment" spellcheck="true">//                    }else</span><span class="token comment" spellcheck="true">//                        //等于0</span><span class="token comment" spellcheck="true">//                        if (mid &lt; right &amp;&amp; nums[left] + nums[mid] + nums[right] == 0) {</span><span class="token comment" spellcheck="true">//                            List&lt;Integer> list = new ArrayList&lt;>();</span><span class="token comment" spellcheck="true">//                            list.add(nums[left]);</span><span class="token comment" spellcheck="true">//                            list.add(nums[mid]);</span><span class="token comment" spellcheck="true">//                            list.add(nums[right]);</span><span class="token comment" spellcheck="true">//                            res.add(list);</span><span class="token comment" spellcheck="true">//                            //去重</span><span class="token comment" spellcheck="true">//                            while(nums[mid] == nums[++mid] &amp;&amp; mid &lt; right);</span><span class="token comment" spellcheck="true">//                            while(nums[right] == nums[--right] &amp;&amp; mid &lt; right);</span><span class="token comment" spellcheck="true">//                            System.out.println(mid);</span><span class="token comment" spellcheck="true">//                            System.out.println(right);</span><span class="token comment" spellcheck="true">//                        }</span><span class="token comment" spellcheck="true">//                if (mid > right) {</span><span class="token comment" spellcheck="true">//                    break;</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            left++;</span><span class="token comment" spellcheck="true">//            mid = left+1;</span><span class="token comment" spellcheck="true">//            right = nums.length - 1;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        return res;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乘最多水的容器</title>
      <link href="/2022/05234324.html"/>
      <url>/2022/05234324.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/05234324/1653275335130.png" class title="乘最多水的容器"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int res = (len - 1) * Math.min(height[0],height[len - 1]);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> height <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nowRes <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span>left<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>nowRes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子串</title>
      <link href="/2022/052252608.html"/>
      <url>/2022/052252608.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/052252608/1653206777612.png" class title="最长回文子串"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxlen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            int end = 0;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//最短的回文串是1，也必定会出现</span>                <span class="token keyword">int</span> nowlen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前值与左值相等 左减</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left<span class="token operator">--</span><span class="token punctuation">;</span>                    nowlen<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//当前值与右值相等 左加</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    right<span class="token operator">++</span><span class="token punctuation">;</span>                    nowlen<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//当左右相等时，左减右加</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left<span class="token operator">--</span><span class="token punctuation">;</span>                    right<span class="token operator">++</span><span class="token punctuation">;</span>                    nowlen <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                System.out.println(nowlen);</span>                <span class="token comment" spellcheck="true">//当跳出while的时候，就是不符合回文串的时候</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nowlen <span class="token operator">></span> maxlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxlen <span class="token operator">=</span> nowlen<span class="token punctuation">;</span>                     start <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                     end = right;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                maxlen = Math.max(nowlen,maxlen);</span><span class="token comment" spellcheck="true">//                System.out.println(nowstr);</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            System.out.println(start);</span><span class="token comment" spellcheck="true">//            System.out.println(end);</span>            String maxstr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> maxlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(maxstr);</span><span class="token comment" spellcheck="true">//            System.out.println(maxlen);</span>            <span class="token comment" spellcheck="true">// System.out.println(maxstr);</span>            <span class="token keyword">return</span> maxstr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找两个正序数组中的中位数</title>
      <link href="/2022/051642092.html"/>
      <url>/2022/051642092.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p>​    <em><img src="/2022/051642092/1652686903191.png" class title="寻找两个正序数组中的中位数"></em></p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果m+n为奇数，那么a和b是相等的，不会影响平均数，偶数的话就是平均数</span>      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//找出a位置和b位置的数</span>      <span class="token keyword">int</span> resa <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> resb <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>resa <span class="token operator">+</span> resb<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//两个数组及其起始位置，k为要找的数字的位置</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果i位置大于等于长度，说明nums1走完了，就去nums2里直接找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果要找第一个元素，那么就找这两个数组中最小的数,也就是他们起始位置中最小的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//确保还有第k/2个值</span>       <span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> k<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">?</span> nums1<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>       <span class="token keyword">int</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> k<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">?</span> nums2<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//如果两个数组中的第k/2相等  如果k是偶数，那么这个位置的数字就是要找的，无论舍弃哪个都会留下有正确答案的,如果是奇数，答案在某个数组的k/2的下一个，总之正确答案不会被舍弃掉</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m1 <span class="token operator">==</span> m2 <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> m1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//两个数组中谁的第k/2个数小，就舍弃他的前k/2个数，k也小一半</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m1 <span class="token operator">&lt;</span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">+=</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            k <span class="token operator">-=</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>i<span class="token punctuation">,</span>nums2<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            j <span class="token operator">+=</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            k <span class="token operator">-=</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>i<span class="token punctuation">,</span>nums2<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数相加</title>
      <link href="/2022/051331986.html"/>
      <url>/2022/051331986.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/051331986/1652453781084.png" class title="两数相加"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为需要变化l3，我们需要保持res不变</span>    ListNode res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode l3 <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果l1 l2有一个为0但carry不为零，就只需要加剩余的一个</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">||</span> l2 <span class="token operator">!=</span> null<span class="token operator">||</span>carry <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                carry <span class="token operator">+=</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                carry <span class="token operator">+=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//例如刚开始是9+9   carry就等于18  l3这一位就等于8，</span>            l3<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            l3 <span class="token operator">=</span> l3<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//carry除以10之后带到下一位  例如18，就会把1带到下一位</span>            carry <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字序列中某一位的数字</title>
      <link href="/2022/051243099.html"/>
      <url>/2022/051243099.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/051243099/1652363972400.png" class title="数字序列中某一位的数字"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//前十位每个占一格  总共有10个位子除去0还有9个</span>            <span class="token comment" spellcheck="true">//10-99 占2格      总共有90 * 2 = 180个位子</span>            <span class="token comment" spellcheck="true">//100 -999 占3格   总共有 900 * 3 = 2700个位子</span>            <span class="token comment" spellcheck="true">//所以知道n可以知道是几位数，第几个</span>            <span class="token comment" spellcheck="true">//占了几位</span>            <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在第几个数字中</span>            <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//目前占了多少个数字。因为n&lt; 2e31,所以count是可能越int的</span>            <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//例如1，10，100，1000</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n <span class="token operator">-=</span> count<span class="token punctuation">;</span>                digit<span class="token operator">++</span><span class="token punctuation">;</span>                start <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> digit <span class="token operator">*</span> start <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//在第res个数字中</span>            res <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>digit<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这个数的第几位</span>            <span class="token keyword">return</span> Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> digit<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1~n整数中1出现的次数</title>
      <link href="/2022/051244229.html"/>
      <url>/2022/051244229.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/051244229/1652360648138.png" class title="1~n整数中1出现的次数"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//11               1，11                   3</span>        <span class="token comment" spellcheck="true">//12               1，11，12               4</span>        <span class="token comment" spellcheck="true">//20                                       11</span>        <span class="token comment" spellcheck="true">//21               1，11，12-19 21         12</span>        <span class="token comment" spellcheck="true">//23               1，11，12-19，21        12</span>        <span class="token comment" spellcheck="true">//30                                       12</span>        <span class="token comment" spellcheck="true">//31                                       13</span>        <span class="token comment" spellcheck="true">//41                                       14</span>        <span class="token comment" spellcheck="true">//例如十位上的数字如果等于1，可以贡献的1的个数由他的高位和低位决定</span>        <span class="token comment" spellcheck="true">//例如212，要求10位上的1，那么会出现多少次10呢，2*10 + (2 + 1)次，即23</span>        <span class="token comment" spellcheck="true">//如果当前位是0，那么本位出现1的的次数与高位有关，例如101中十位上出现1的次数是1个11-19</span>        <span class="token comment" spellcheck="true">//如果当前位大于1，那么由高位决定例如221  十位出现1的次数就是 (2+1)*10</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//高位</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前位,从个位开始</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//低位</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//位因子</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//高位 * 位因子</span>                res <span class="token operator">+=</span> high <span class="token operator">*</span> digit<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">+=</span> high <span class="token operator">*</span> digit <span class="token operator">+</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res <span class="token operator">+=</span><span class="token punctuation">(</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> digit<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//更新low  cur  hight  dight</span>            low <span class="token operator">+=</span>cur <span class="token operator">*</span> digit<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cur是high的最后一位</span>            cur <span class="token operator">=</span> high <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//高位上升</span>            high <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//位因子乘10</span>            digit <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪绳子Ⅱ</title>
      <link href="/2022/05121437.html"/>
      <url>/2022/05121437.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/05121437/1652343102182.png" class title="剪绳子"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">long</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//减去</span>            n <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//res乘以剩下的n</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>res <span class="token operator">*</span> n <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中的逆序对</title>
      <link href="/2022/051233062.html"/>
      <url>/2022/051233062.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/051233062/1652325971141.png" class title="数组中的逆序对"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//总和</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//左右分别递归之后进行排序总和</span>            <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temparr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp1 <span class="token operator">=</span> l<span class="token punctuation">,</span> temp2 <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp1 <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> temp2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temparr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>temp1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//逆序对的个数</span>                count <span class="token operator">+=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> temp1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temparr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>temp2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这两个while一定会走一个</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp1 <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temparr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>temp1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temparr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>temp2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//把新数组中的数覆盖nums数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> temparr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>k <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> temparr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印从1到最大的n位数</title>
      <link href="/2022/050919711.html"/>
      <url>/2022/050919711.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/050919711/1652062400631.png" class title="打印从1到最大的n位数"></em></p><p>解法1:不考虑大数:</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:考虑大数:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>nine <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化start例如最大99，那么前十个的个位就不需要</span>        start <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">rec</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除最后的逗号</span>        <span class="token comment" spellcheck="true">// res.deleteCharAt(res.length() - 1);</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定完所有的位</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//截取</span>            String s <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//num添加到res尾部用逗号隔开</span>                <span class="token comment" spellcheck="true">// res.append(s + ",");</span>                res<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//所有位都是9即要进位了</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">-</span> start <span class="token operator">==</span> nine<span class="token punctuation">)</span> <span class="token punctuation">{</span>                start<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//每一位</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//a[0]=0</span>                <span class="token comment" spellcheck="true">//a[1]=0</span>            <span class="token comment" spellcheck="true">//固定的x位是i</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                nine<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//下一位固定</span>            <span class="token function">rec</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//nine恢复</span>        nine<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n个骰子的点数</title>
      <link href="/2022/050816741.html"/>
      <url>/2022/050816741.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p>​    <em><img src="/2022/050816741/1651980701427.png" class title="n个骰子的点数"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dicesProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//填充1/6</span>            Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//有n-1个骰子的每一项都会对有n个骰子点数总和产生影响</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//第n个骰子的六项</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//加上前dp数组j值对应概率/6</span>                        tmp<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//将目前数组赋给dp</span>                dp <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丑数</title>
      <link href="/2022/05074116.html"/>
      <url>/2022/05074116.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/05074116/1651915275907.png" class title="丑数"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//每个丑数都是由它前面某个丑数乘以2/3/5得到的，我们需要得到第n个丑数，</span>       <span class="token comment" spellcheck="true">//比如已经知道了第n-1个丑数，我们就需要得到最小的乘以2/3/5之后比它大的，</span>       <span class="token comment" spellcheck="true">//这几个乘以中的最小值就是下一个丑数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1690</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n3 <span class="token operator">=</span> dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n5 <span class="token operator">=</span> dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token punctuation">,</span>n5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果dp[i]是a*2得到，那么下一个需要*2得到的丑数就是a的下一个</span>                a <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n3<span class="token punctuation">)</span> <span class="token punctuation">{</span>                b <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n5<span class="token punctuation">)</span> <span class="token punctuation">{</span>                c <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式的匹配</title>
      <link href="/2022/050510213.html"/>
      <url>/2022/050510213.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/050510213/1651765441060.png" class title="正则表达式的匹配"></em></p><p>解法1:递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//主串为0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正则串的*只能和前一个抵消，所以如果是长度为奇数，则必然不匹配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果是偶数，看看偶数位是否是*，如果不是，就是false，因为没有连续的*</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//主串不为0，正则串为0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//c1c2是两个串的当前位置，c3是正则串的后一位，先随便赋值</span>    <span class="token keyword">char</span> c1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c2 <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'~'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         c3 <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//看正则串的后一位，如果不是*</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c3 <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果不是*，就可以直接看c1c2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2 <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//否则不匹配</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正则串的后一位是*</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2 <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//     匹配了一个                    //不匹配</span>            <span class="token keyword">return</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不一样的话，正则串这两个就没用了</span>            <span class="token keyword">return</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:改为动态规划</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> alen <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> blen <span class="token operator">=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ism <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>alen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>blen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> alen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> blen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//正则串为空。是否匹配取决于主串是否为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ism<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//正则串本位不为*</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ism<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ism<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果不看，就砍掉</span>                        ism<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ism<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//正则串本位为*    如果需要使用*</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果在前一步已经计算ism[i][j]是true，就不需要计算</span>                        ism<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> ism<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ism<span class="token punctuation">[</span>alen<span class="token punctuation">]</span><span class="token punctuation">[</span>blen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串的排列</title>
      <link href="/2022/05033080.html"/>
      <url>/2022/05033080.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/05033080/1651556029406.png" class title="字符串的排列"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">permutation</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二个参数为固定到了第几个数</span>        <span class="token function">rec</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定到了最后一个数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最后一个数也只有一个排列,也说明固定完了</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//去重</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果set中以已经固定过这个数了,就进行下一个固定</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//交换当前数与固定到的最后一个数</span>            <span class="token function">swap</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rec</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux笔记</title>
      <link href="/2022/050224884.html"/>
      <url>/2022/050224884.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h3 id="网络连接的三种方式"><a href="#网络连接的三种方式" class="headerlink" title="网络连接的三种方式"></a>网络连接的三种方式</h3><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p>虚拟系统可以和外部系统通讯，但是容易造成ip冲突(超过255)</p><h4 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h4><p>NAT是网络地址转换，相当于给你虚拟机虚拟一个ip，然后在需要访问外部的时候，自动转换成你母机ip去访问外部，但是外部不可以直接访问内部</p><h4 id="主机模式"><a href="#主机模式" class="headerlink" title="主机模式"></a>主机模式</h4><p>相当于一个独立的系统，不与外界发生联系</p><h3 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h3><ul><li>/bin               (/usr/bin、/usr/local/bin),是Binary的缩写，存放着最常使用的命令</li><li>/sbin               存放的是系统管理员使用的系统管理程序</li><li>/home             存放普通用户的主目录，在linux中每个用户都有自己的目录</li><li>/root               系统管理员，也成为超级权限者的用户主目录</li><li>/lib                  系统开机所需要的最基本的动态连接共享库</li><li>/lost+found      一般情况是空的，当系统非法关机后，这里就存放了一些文件</li><li>/etc                 所有的系统管理所需要的配置文件和子目录，例如mysql的my.conf</li><li>/usr                 用户的很多应用程序和文件都放在这个目录下，类似于windows的program files目录</li><li>/boot              存放的是启动linux时使用的一些核心文件，包括一些连接文件以及镜像文件</li><li>/proc              是一个虚拟目录，是系统内存的映射，访问这个目录来获取系统信息</li><li>/srv                service的缩写，存放一些服务启动之后需要提取的数据</li><li>/sys                linux2.6之后出现，安装了一个文件系统sysfs</li><li>/tmp              用来存放一些临时文件</li><li>/dev               类似于Windows的设备管理器，把所有的硬件用文件形式存储</li><li>/media           会自动识别一些例如u盘光驱等设备，识别后就将识别的设备挂载到这目录下 </li><li>/mnt              该目录是为了让用户挂载别的文件系统，可以将外部存储挂载在/mnt上，进入该目录查看</li><li>/opt               给主机额外安装软件的目录</li><li>/usr/local       另一个给主机额外安装软件所安装的目录，一般是通过编译源码方式安装的程序</li><li>/var              存放一些不断扩张的东西，习惯将经常被修改的目录放在这个目录下，包括各种日志文件</li><li>/selinux[security-enhanced linux]   是一种安全的子系统，它能控制程序只访问特定文件，有三种工作模式，可以自行设置</li></ul><h3 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h3><h4 id="常用的三种模式"><a href="#常用的三种模式" class="headerlink" title="常用的三种模式"></a>常用的三种模式</h4><h5 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h5><p>是vim的默认模式，这个模式中可以使用上下左右来移动光标，可以使用删除或删除整行来处理内容，也可以复制粘贴</p><h5 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h5><p>按下i、I、o、O、a、A、r、R中任意一个字母进入编辑模式，一般按i即可</p><h5 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h5><p>输入esc退出当前模式，再输入<code>:</code>进入命令行模式</p><p>可以提供相关指令，完成读取，存盘，替换，离开vim显示行号等动作。</p><h4 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h4><p>在一般模式下:</p><ul><li>yy   拷贝当前行；5yy 拷贝当前向下的5行，p  粘贴   u撤销  x删除</li><li>dd   删除当前行；5dd，删除当前向下的5行</li><li>G     文档最末行，gg    最首行</li><li>先输入行号 在输入shift+g   表示移动到多少行</li></ul><p>在命令行模式下:</p><ul><li><p>wq(保存退出)    q(退出)   q!(强制退出不保存)</p></li><li><p>/关键字  回车    查找某个单词，输入n是查找下一个</p></li><li><p>set nu 设置文件的行号，set nonu 取消文件的行号</p></li></ul><h3 id="开机重启与用户登录注销"><a href="#开机重启与用户登录注销" class="headerlink" title="开机重启与用户登录注销"></a>开机重启与用户登录注销</h3><h4 id="开关机与重启"><a href="#开关机与重启" class="headerlink" title="开关机与重启"></a>开关机与重启</h4><ul><li>shutdown -h now     立刻关机</li><li>shutdown -h 1         1分钟后关机</li><li>shutdown -r now      立即重启</li><li>halt                        现在关机</li><li>reboot                    现在重启</li><li>sync                       把内存的数据同步到磁盘</li></ul><p>不管重启还是关机，都会先进行sync命令，目前的大部分命令都会在关机前执行sync，但是再执行一次较好</p><p>直接输入shutdown默认为shutdown -h 1</p><h4 id="用户登录与注销"><a href="#用户登录与注销" class="headerlink" title="用户登录与注销"></a>用户登录与注销</h4><ul><li>su - 用户名                切换用户</li><li>logout                       注销用户</li></ul><h3 id="linux用户管理"><a href="#linux用户管理" class="headerlink" title="linux用户管理"></a>linux用户管理</h3><p>linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p><h4 id="用户基本操作"><a href="#用户基本操作" class="headerlink" title="用户基本操作"></a>用户基本操作</h4><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><ul><li>useradd 用户名              添加用户</li><li>useradd -g 用户组 用户名                 增加用户时直接加上组</li></ul><p>创建成功后，会自动创建和用户名相同的home目录，也可以通过useradd -d 指定目录，新的用户名，给新创建的目录指定home目录</p><p>如果直接添加用户而不指定组，则虚拟机会默认创建一个以用户名为名的组并将其放入组中</p><h5 id="修改-指定密码"><a href="#修改-指定密码" class="headerlink" title="修改/指定密码"></a>修改/指定密码</h5><p>passwd 用户名                  给某个用户设置密码</p><blockquote><p>pwd命令是显示当前用户所在目录</p></blockquote><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><ul><li>userdel 用户名                   删除用户但保留对应home目录</li><li>userdel -r 用户名               删除用户并且删除对应home目录</li></ul><h5 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h5><ul><li>id 用户名</li></ul><h5 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h5><ul><li><p>su - 切换的用户名                       切换用户，高权限切低权限不需要密码，反之需要</p></li><li><p>exit/logout                              返回到原来用户</p></li></ul><h5 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h5><ul><li>whoami/who am i                     查看当前用户，<code>不加空格是当前操作的用户，加空格是第一次登录用户</code></li></ul><p><em><img src="/2022/050224884/1651558127441.png" class title="查看当前用户"></em></p><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>类似于角色，系统可以对有共性(权限)的多个用户进行统一的管理</p><h5 id="新增组"><a href="#新增组" class="headerlink" title="新增组"></a>新增组</h5><ul><li>groupadd 组名                               新增组</li><li>useradd -g 用户组 用户名                 增加用户时直接加上组</li></ul><p>如果直接添加用户而不指定组，则虚拟机会默认创建一个以用户名为名的组并将其放入组中</p><h5 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h5><ul><li>usermod -g 用户组 用户名</li></ul><h4 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h4><ul><li>/etc/passwd 文件</li></ul><p>用户(user)的配置文件，记录用户的各种信息</p><p>每一行都是一个用户：含义: <code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录shell</code></p><ul><li>/etc/shadow文件</li></ul><p>口令配置文件,每行的含义:<code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></p><ul><li> /etc/group文件</li></ul><p>组的配置文件，记录linux中组的信息，每行含义:<code>组名:口令:组标识号:组内用户列表</code></p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h4><p>运行级别说明</p><ol start="0"><li><p>关机</p></li><li><p>单用户[找回丢失的密码]</p></li><li><p>多用户状态没有网络服务</p></li><li><p>多用户状态有网络服务</p></li><li><p>系统未使用保留给用户</p></li><li><p>图形界面</p></li><li><p>系统重启</p></li></ol><p>常用的运行级别是3和5</p><ul><li>init[0123456]              切换运行级别</li><li>systemctl get-default        查看目前的运行级别</li><li>systemctl set-default mult-user.target/systemctl set-default graphical.target  设置允许级别，前者相当于3，后者相当于5</li></ul><h4 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h4><ol><li><p>启动系统，进入开机页面，在页面中按‘e’进入编辑界面</p></li><li><p>进入之后使用键盘的上下键移动光标，找到以“Linux 16”开头所在的行数，在行的最后输入:init=/bin/sh</p></li><li><p>输入之后按快捷键Ctrl + x 进入单用户模式</p></li><li><p>在光标闪烁的位置输入<code>mount -o remount,rw /</code>  (单词间有空格)，然后按回车</p></li><li><p>在新的一行最后面输入passwd。完成后按回车输入密码，然后再次确认密码即可</p></li><li><p>接着在鼠标闪烁的位置输入: touch /.autorelabel(touch 后面又空格),之后继续按回车</p></li><li><p>接着在光标闪烁的位置输入 exec /sbin/init    之后按回车键，等待系统修改密码，完成后系统会自动重启</p></li></ol><h4 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h4><ul><li>man    语法:man[命令或配置文件] </li><li>help     语法:help 命令          (获得shell内置命令的帮助信息)</li></ul><h4 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h4><ul><li>pwd      显示当前工作目录的绝对路径</li><li>ls          显示目录:常用选项:  -a,显示所有，包括隐藏的，-l  以列表     -lh  (h是human的意思)指的是按照人类比较容易看的方式显示</li><li>cd         定位相对路径或绝对路径         cd~回到自己的home目录，cd..回到上级目录</li><li>mkdir     创建目录  mkdir [选项]  要创建的目录     -p为创建多级目录</li><li>rmdir     删除目录   mkdir[选项]   要删除的空目录 ，如果需要删除非空目录，需要使用rm -rf 要删除的目录   -r表示递归，f表示强制删除</li><li>touch     创建空文件</li><li>cp           拷贝文件到指令目录  cp [选项] 文件 指定目录        选项:-r   递归复制整个文件夹  \cp  强制覆盖不提示</li><li>rm         移除文件或目录   rm[选项] 要删除的文件或目录，-r递归 -f强制删除不提示</li><li>mv          移动文件或重命名      重命名:mv  old   new  移动: mv /old  /new</li><li>cat         查看文件内容      -n显示行号</li><li>more       more 要查看的文件 ，指令中内置了快捷键<ul><li>空格键(space)       向下翻一页</li><li>回车键(Enter)        向下翻一行</li><li>q                        立刻离开</li><li>Ctrl+f                  向下滚动一屏</li><li>Ctrl+B                 返回上一屏</li><li>=                        输出当前行的行号</li><li>:f                        输出文件名和当前行的行号</li></ul></li><li>less           分屏查看文件内容，与more类似却更加强大，他是懒加载模式<ul><li>空格键(space)       向下翻一页</li><li>下键(pagedown)   向下翻一行</li><li>上建(pageup)       向上翻一行</li><li>/                        向下搜索字串功能  n向下查找；N向上查找</li><li>？                      向上搜索字串功能  n向上查找；N向下查找</li><li>q                       立刻离开</li></ul></li><li>echo                       输出内容到控制台，例如要输出环境变量   echo $PATH</li><li>head                       显示文件开头的部分内容，默认十行    head -n 任意数字，查看前任意行</li><li>tail                          显示文件中尾部内容，默认十行   -f实时追踪文件更新</li><li>&gt;与&gt;&gt;                     输出重定向(覆盖)和追加<ul><li>ls -l &gt; 文件          列表的内容写入到文件中(覆盖)</li><li>ls -al &gt;&gt;文件       列表内容追加到文件的末尾</li><li>cat 文件1&gt;文件2    文件1内容覆盖到文件2</li><li>echo  “内容” &gt;&gt; 文件     将内容追加到文件末尾                             </li></ul></li><li>ln                            软连接，也被称为符号链接，类似于快捷方式   ln -s [源文件或目录] [软连接名]</li><li>history                       查看已经执行过的历史命令 后面加数字是查看最近的n个命令，查看的命令前会带有参数，可以直接!+参数来执行命令</li><li>sort                         以行为单位排序文本内容   -n按照数值大小排序   -r反序排序</li><li>uniq                        检查文本中出现的重复的行和列，一般与sort结合使用  -c在每列旁显示重复出现的次数</li><li>cut                          显示每行从开头算起num1到num2的文字  -b以字节分割，-c以字符分割，-d自定义分割符，-f与-d一起使用，指定显示哪个区域。</li></ul><h4 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h4><ul><li>date                 显示当前日期   %Y/m/d       (分别是显示年月日)  date+”+%Y-%m-%d%H:%M:%S”（年月日时分秒)     设置日期:date -s 字符串时间</li><li>cal +选项          查看日历，不加选项默认本月,加了就是参数当年的日历</li></ul><h4 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h4><ul><li><p>find                 从指定目录<code>向下递归遍历</code>其各个子目录，将满足条件的文件或目录显示在终端，              语法:find 搜索范围 选项          选项:  -name&lt;查询方式&gt;  按照指定的文件名查找模式查找文件，             -user&lt;用户名&gt;    查找属于指定用户名的所有文件   -size&lt;文件大小&gt; 按照指定的文件大小查找文件</p><ul><li><p>-amin n : 在过去 n 分钟内被读取过</p><p>  -anewer file : 比文件 file 更晚被读取过的文件</p><p>  -atime n : 在过去 n 天内被读取过的文件</p><p>  -cmin n : 在过去 n 分钟内被修改过</p><p>  -cnewer file :比文件 file 更新的文件</p><p>  -ctime n : 在过去 n 天内创建的文件</p><p>  -mtime n : 在过去 n 天内修改过的文件</p></li></ul></li></ul><p><em><img src="/2022/050224884/1651736305314.png" class title="案例"></em></p><blockquote><p>由于locate指令基于数据库查询，所以第一次查找前必须使用updatedb指令来创建一个新的locate库</p></blockquote><ul><li><p>locate             快速定位文件路径，locate指令利用事先建立的系统中所有文件名及路径上的locate数据库实现快速定位给定的文件，无需遍历整个系统，速度较快，但为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p></li><li><p>which             可以查看某个指令在哪个目录下，比如 ls 指令在哪个目录，which ls</p></li><li><p>grep和管道符”|”     过滤查找，管道符”|”表示<code>将前一个命令的处理结果输出传递给后面的命令</code>处理，基本语法: grep [选项] 查找内容，源文件   -n显示匹配行及行号，-i忽略字母大小写 -v反向匹配(也就是不匹配有的)</p></li><li><p>xargs             能够捕获一个命令的输出，然后传递给另外一个命令</p><pre class="line-numbers language-shell"><code class="language-shell">find /sbin -perm +700 |ls -l       #这个命令是错误的find /sbin -perm +700 |xargs ls -l   #这样才是正确的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h4><ul><li>gzip/gunzip              压缩(压缩成*.gz文件)/解压文件</li><li>zip/unzip                  压缩/解压缩        -r递归压缩，   -d&lt;目录&gt; 指定解压后文件存放目录</li><li>tar                           压缩和解压缩  ，最后打包的是.tar.gz文件   <ul><li>-c 产生.tar打包文件</li><li>-v  显示详细信息</li><li>-f  指定压缩后的文件名</li><li>-z  打包同时压缩/解压    <code>有x时解压，有c是压缩</code></li><li>-x  解包.tar文件</li></ul></li></ul><h4 id="mysql相关"><a href="#mysql相关" class="headerlink" title="mysql相关"></a>mysql相关</h4><ul><li><p>在连接情况下</p><ul><li><p>mysql&gt; show variables like ‘%dir%’; </p><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">'%dir%'</span><span class="token punctuation">;</span>+-----------------------------------------+-----------------------------------+<span class="token operator">|</span> Variable_name                           <span class="token operator">|</span> Value                             <span class="token operator">|</span>+-----------------------------------------+-----------------------------------+<span class="token operator">|</span> basedir                                 <span class="token operator">|</span> /www/server/mysql                 <span class="token operator">|</span><span class="token operator">|</span> binlog_direct_non_transactional_updates <span class="token operator">|</span> OFF                               <span class="token operator">|</span><span class="token operator">|</span> character_sets_dir                      <span class="token operator">|</span> /www/server/mysql/share/charsets/ <span class="token operator">|</span><span class="token operator">|</span> datadir                                 <span class="token operator">|</span> /www/server/data/                 <span class="token operator">|</span><span class="token operator">|</span> innodb_data_home_dir                    <span class="token operator">|</span> /www/server/data                  <span class="token operator">|</span><span class="token operator">|</span> innodb_log_group_home_dir               <span class="token operator">|</span> /www/server/data                  <span class="token operator">|</span><span class="token operator">|</span> innodb_max_dirty_pages_pct              <span class="token operator">|</span> 90                                <span class="token operator">|</span><span class="token operator">|</span> lc_messages_dir                         <span class="token operator">|</span> /www/server/mysql/share/          <span class="token operator">|</span><span class="token operator">|</span> plugin_dir                              <span class="token operator">|</span> /www/server/mysql/lib/plugin/     <span class="token operator">|</span><span class="token operator">|</span> slave_load_tmpdir                       <span class="token operator">|</span> /tmp                              <span class="token operator">|</span><span class="token operator">|</span> tmpdir                                  <span class="token operator">|</span> /tmp                              <span class="token operator">|</span>+-----------------------------------------+-----------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  其中数据库目录在/www/server/data/</p></li></ul></li></ul><h4 id="shell相关"><a href="#shell相关" class="headerlink" title="shell相关"></a>shell相关</h4><ul><li>exec     后跟指令表示调用其他的指令，常用于shell中</li></ul><h3 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h3><p>在linux中每个用户必须属于一个组，不能独立于组外，在linux中每个<code>文件有所有者，所在组，其他组</code>的概念</p><h4 id="文件-目录所有者"><a href="#文件-目录所有者" class="headerlink" title="文件/目录所有者"></a>文件/目录所有者</h4><p>一般为文件的创建者，谁创建了该文件，就成为该文件的所有者</p><ul><li>ls -ahl                               查看文件的所有者</li><li>chown  用户名  文件名         修改文件所有者</li><li>chown  用户名: 组名             修改文件/目录的所有者和所在组          -R递归</li></ul><h4 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h4><ul><li>groupadd 组名</li></ul><h4 id="修改文件所在组"><a href="#修改文件所在组" class="headerlink" title="修改文件所在组"></a>修改文件所在组</h4><ul><li>chgrp 组名 文件名</li></ul><h4 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h4><ul><li>usermod -g 新组名 用户名</li><li>usermod -d 目录名 用户名    改变该用户登陆的初始目录</li></ul><h4 id="rwx权限"><a href="#rwx权限" class="headerlink" title="rwx权限"></a>rwx权限</h4><p>例如    -rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p><p>​        rwx分别为可读可写可执行</p><p>​    第零位可能为[d,-,l,c,b]   用来确定文件类型</p><p>​                d是目录，相当于文件夹</p><p>​                -是普通文件</p><p>​                l是链接，相当于快捷方式</p><p>​                c是字符设备文件，鼠标，键盘</p><p>​                b是块设备，比如硬盘</p><p>一到三位确定所有者拥有该文件的权限 </p><p>四到六位确定所属组拥有的权限</p><p>七到九位确定其他用户组拥有的权限</p><p>1:文件:硬连接数 目录:子目录数(包括隐藏的.和..)+子文件数</p><p>root: 用户</p><p>root: 组 </p><p>12123 文件大小，如果是文件夹，显示4069字节</p><p>feb…：最后修改日期</p><p>abc:文件名</p><h5 id="作用到文件"><a href="#作用到文件" class="headerlink" title="作用到文件"></a>作用到文件</h5><p>r:可读，查看</p><p>w:可写，但是不代表可以删除该文件，前提条件是对该文件所在目录有写权限，才能删除</p><p>x:可执行</p><h5 id="作用到目录"><a href="#作用到目录" class="headerlink" title="作用到目录"></a>作用到目录</h5><p>r:可读</p><p>w:可以修改，对目录内创建+删除+重命名目录</p><p>x:可以进入该目录          (意思是可以cd到目录，但不可以ls目录，如果对目录下的文件有修改功能，也是可以                                      修改的)</p><p>权限可用数字表示，r为4，w为2，x为1；</p><p>​    u为所有者,g为所在组,o为其他人</p><p>​    有+=-三种方式改变权限</p><ul><li>chmod u=rwx,g=rx,o=x 文件/目录;         ==          chmod 751  文件/目录 </li></ul><h3 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h3><h4 id="cornd定时任务"><a href="#cornd定时任务" class="headerlink" title="cornd定时任务"></a>cornd定时任务</h4><p>任务调度是指系统在某个时间执行的特定的命令或程序</p><p>分类：系统工作:有些重要的工作必须<code>周而复始</code>的执行，如病毒扫描等</p><p>​        个别用户工作:个别用户可能希望执行某些程序，比如mysql程序的备份</p><ul><li>crontab            进行定时任务的设置   -e编辑定时任务，-l查询定时任务   -r删除当前用户所有的定时任务</li></ul><p>占位符:</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个*</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个*</td><td>一天当中的第几个小时</td><td>0-23</td></tr><tr><td>第三个*</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个*</td><td>一年当中的第几个月</td><td>1-12</td></tr><tr><td>第五个*</td><td>一周当中的星期几</td><td>0-7(0和7都代表星期日)</td></tr></tbody></table><p>特殊符号说明</p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间，比如第一个*代表一小时中的每一分钟都执行一次的意思</td></tr><tr><td>，</td><td>代表不连续的时间，比如“0 8,12,16 * * *”代表每天的8:00,12:00,16:00都会执行</td></tr><tr><td>-</td><td>代表连续的时间范围，如“0 5 * * 1-6”代表周一到周六的凌晨5:00执行命令</td></tr><tr><td>*/n</td><td>代表每隔多久执行一次,如“*/10 * * * *”代表每隔十分钟执行一次命令</td></tr></tbody></table><p><em><img src="/2022/050224884/1652432035656.png" class title="定时任务调度实践"></em></p><h4 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h4><ul><li>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行</li><li>默认情况atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</li></ul><ul><li>at [选项] [时间]                ctrl+D代表命令输入结束(需要输入两次)  如果输入错误 摁 Ctrl+backspace删除</li><li>atq                              列出所有的任务</li><li>atrm 编号                     删除指定任务</li></ul><p><em><img src="/2022/050224884/1652433271821.png" class title="at命令参数"></em></p><p>时间定义:</p><p><em><img src="/2022/050224884/1652433330385.png" class title="at命令时间"></em></p><h3 id="磁盘分区与挂载"><a href="#磁盘分区与挂载" class="headerlink" title="磁盘分区与挂载"></a>磁盘分区与挂载</h3><p>linux只有一个根目录，一个独立且唯一文件结构，Linux中每个分区都是用来组成整个文件系统的一部分</p><p>linux采用了一种叫”载入”的处理方法，他的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时要载入的一个分区将使得它的存储空间在一个目录下获得</p><ul><li>lsblk                 查看所有设备挂载情况 -f可以看更详细的内容</li><li>fdisk                分区，m显示命令列表；p显示磁盘分区，同fdisk -l；n新增分区，d删除分区，w写入并推出；  过程：开始分区后输入n新增分区，然后选择p，分区类型为主分区，两次回车默认剩余全部空间，最后输入w写入分区并退出，若不报存退出输入q</li><li>mkfs                格式化分区  mkfs [选项] [-t 分区格式] 分区路径</li><li>mount             挂载分区  </li><li>umount           卸载分区</li></ul><p>使用命令行挂载之后，重启之后会失效</p><h4 id="挂载硬盘的步骤"><a href="#挂载硬盘的步骤" class="headerlink" title="挂载硬盘的步骤"></a>挂载硬盘的步骤</h4><ol><li>虚拟机添加硬盘</li><li>分区</li><li>格式化</li><li>挂载</li><li>设置自动挂载</li></ol><p>永久挂载:修改/etc/fstab实现挂载，添加完成之后，执行mount -a 即刻生效</p><ul><li>df  -h                  查询系统整体磁盘使用情况</li><li>du -h/目录            查询指定目录的磁盘占用情况，默认为当前目录<ul><li>-s指定目录占用大小汇总</li><li>-h带计量单位</li><li>-a带文件</li><li>–max-depth=1 子目录深度</li><li>-c列出明细的同时，增加汇总值</li></ul></li></ul><p><em><img src="/2022/050224884/1652776925652.png" class title="."></em></p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="NAT网络配置"><a href="#NAT网络配置" class="headerlink" title="NAT网络配置"></a>NAT网络配置</h4><p>nat网络配置（Network Address Translation，网络地址转换） </p><p><em><img src="/2022/050224884/1653209458563.png" class title="NAT网络配置"></em></p><h4 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a>查看网络配置</h4><ul><li>ifconfig(window下是ipconfig)    查看网络配置</li><li>ping 目的主机                          测试主机之间网络连通性 -c 次数  -l网卡， -4只用ipv4网   -6只用ipv6网</li></ul><p>有两种方法修改配置虚拟机ip</p><ol><li>自动获取，但每次分配的ip可能不一样，就不适合做服务器，但不会有ip冲突的问题</li><li>指定ip   <ol><li>直接修改配置文件来指定ip    编辑vi/etc/sysconfig/network-scripts/ifcfg-ens33,将ip地址配置成静态的。</li><li>12</li><li>重启网络服务或者重启系统生效           service network restart(系统)         reboot(网络服务)</li></ol></li></ol><p><em><img src="/2022/050224884/1653294673035.png" class title="指定ip配置"></em></p><h4 id="设置主机名和hosts映射"><a href="#设置主机名和hosts映射" class="headerlink" title="设置主机名和hosts映射"></a>设置主机名和hosts映射</h4><ul><li>hostname                      查看主机名 或者可以在/etc/hostname 指定  修改后重启生效</li></ul><p>设置hosts映射:</p><ul><li>windows:在C:\Windows\System32\drivers\etc\hosts文件指定即可</li><li>linux:在/etc/hosts文件指定</li></ul><blockquote><p>Hosts是一个文本文件，用来记录IP和Hostname(主机名)的映射关系</p><p>DNS 是Domain Name System的缩写，翻译过来是域名系统 是互联网上作为域名和ip地址相互映射的一个分布式数据库</p></blockquote><h5 id="用户在浏览器输入了www-baidu-com"><a href="#用户在浏览器输入了www-baidu-com" class="headerlink" title="用户在浏览器输入了www.baidu.com"></a>用户在浏览器输入了<a href="http://www.baidu.com/">www.baidu.com</a></h5><ol><li>浏览器先检查浏览器缓存中有没有该域名解析ip地址，有就调用这个IP完成解析，如果没有就检查DNS解析器缓存，如果有则直接返回IP完成解析。这两个缓存可以理解为本地解析器缓存</li><li>一般来说当电脑第一次成功访问某网站，在一定时间内，浏览器或操作系统会缓存它的ip地址(DNS解析记录)如在cmd窗口中输入 ipconfig/displaydns   表示DNX域名解析缓存，ipconfig/flushdns表示手动清理DNS缓存</li><li>如果本地解析器没有找到对应映射，检查系统中hosts文件中有没有配置对应的ip映射，如果有，则完成解析并缓存</li><li>如果均没有，则到域名服务DNS进行解析域</li></ol><p>​            <em><img src="/2022/050224884/1653380335324.png" class title="流程"></em></p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>在Linux中，每个执行的程序都称为一个进程，每个进程都分配一个ID号(pid，进程号)</li><li>每个进程都可能以两种方式存在的。前台和后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，屏幕上无法看到，</li><li>一般的系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机才结束</li></ul><h4 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h4><ul><li><p>ps                    用来显示系统中有哪些正在执行，以及他们的执行情况，</p><ul><li><p> -a显示当前终端的所有进程信息</p></li><li><p>-u以用户的格式显示进程信息</p></li><li><p>-x显示后台进程运行的参数</p><p>  一般可以全部组合使用   即: ps -aux 可以配合管道符使用</p></li><li><p>-e显示所有进程</p></li><li><p>-f全格式</p><p>ps -ef是以全格式    显示所有的进程</p><p>​    </p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>USER</td><td>用户名称</td></tr><tr><td>PID</td><td>进程识别号</td></tr><tr><td>TTY</td><td>终端机号</td></tr><tr><td>TIME</td><td>此进程所消耗的CPU时间</td></tr><tr><td>CMD</td><td>正在执行的命令或进程名</td></tr><tr><td>%CPU</td><td>进程占用CPU百分比</td></tr><tr><td>%MEM</td><td>进程占用物理内存百分比</td></tr><tr><td>VSZ</td><td>进程占用的虚拟内存大小(KB)</td></tr><tr><td>RSS</td><td>进程占用物理内存大小(KB)</td></tr><tr><td>TT</td><td>终端名称</td></tr><tr><td>STAT</td><td>进程状态，S-表示睡眠 s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在等待，D-短期等待，Z-僵死进程，T-被跟踪或被停止</td></tr><tr><td>STARED</td><td>进程的启动时间</td></tr><tr><td>COMMAND</td><td>启动进程所用的命令和参数，过长会被截断显示</td></tr></tbody></table></li></ul></li></ul><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><ul><li>kill [选项] 进程号              通过进程号杀死进程  -9表示强制立刻停止</li><li>killall 进程名                    通过进程名杀死进程，包括进程下的子进程。支持通配符，</li></ul><h4 id="查看进程树"><a href="#查看进程树" class="headerlink" title="查看进程树"></a>查看进程树</h4><ul><li>pstree[选项]                    更加直观的查看进程信息  -p:显示进程PID   -u:显示进程的所属用户</li></ul><h4 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><p>服务的本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其他程序的请求，比如(mysql sshd 防火墙等),因此我们又称为守护进程。</p><h5 id="service管理指令"><a href="#service管理指令" class="headerlink" title="service管理指令"></a>service管理指令</h5><blockquote><p>在CentOS7.0之后，很多服务器都不使用service，而是systemctl</p><p>service指令管理的服务在/etc/init.d查看</p></blockquote><ul><li>service 服务名 [start|stop|restart|reload|status]      管理服务</li><li>setup            查看全部服务</li><li>ls -l  /etc/init.d   看到service指令管理的服务</li><li>chkconfig         可以给服务的各个运行级别设置自启动/自关闭<ul><li>chkconfig –list   [|grep xxx]      查看服务</li><li>chkconfig 服务名 –list</li><li>chkingconfig –level 5 服务名 on/off</li></ul></li><li>systemctl [start|stop|restart|reload|status] 服务名<ul><li>systemctl指令管理的服务在/usr/lib/systemd/system    查看</li><li>systemctl list-unit-files [|grep 服务名]   查看开机启动状态</li><li>systemctl enable 服务名    设置服务开机启动</li><li>systemctl disable 服务名     关闭服务开机启动</li><li>systemctl is-enabled 服务名   查询某个服务是否是自启动的</li><li>这种方式只是临时生效，重启系统后失效，如果想要永久的话，得用enable或disable</li></ul></li></ul><h5 id="服务的运行级别"><a href="#服务的运行级别" class="headerlink" title="服务的运行级别"></a>服务的运行级别</h5><p>linux系统有7种运行级别(runlevel)，常用的级别是3和5</p><table><thead><tr><th>运行级别</th><th>描述</th></tr></thead><tbody><tr><td>0级</td><td>系统停机状态，系统默认的运行级别不能设为0，否则不能正常启动</td></tr><tr><td>1级</td><td>单用户工作状态，root权限，用于系统维护，禁止远程登录</td></tr><tr><td>2级</td><td>多用户状态(没有NFS),不支持网络</td></tr><tr><td>3级</td><td>完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</td></tr><tr><td>4级</td><td>系统未使用，保留</td></tr><tr><td>5级</td><td>x11控制台，登陆后进入图像GUI模式</td></tr><tr><td>6级</td><td>系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</td></tr></tbody></table><h5 id="linux开机流程"><a href="#linux开机流程" class="headerlink" title="linux开机流程"></a>linux开机流程</h5><p>开机=》BIOS=》/boot=》system进程1=》运行级别=》运行级对应的服务</p><h5 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h5><ul><li>firewall-cmd –permanent –add-port=端口号/协议          打开端口</li><li>firewall-cmd –permanent –remove-port=端口号/协议      关闭端口</li><li>firewall-cmd –query-port=端口/协议       查询端口是否开放</li><li>firewall-cmd –reload      重启防火墙(每次修改完都需要重启)</li><li>netstat -anp |more     查看端口的信息</li></ul><h4 id="动态监控"><a href="#动态监控" class="headerlink" title="动态监控"></a>动态监控</h4><p>top与ps很接近，他们都可以显示正在执行的进程。top在执行一段时间可以更新正在运行的进程</p><ul><li>top[选项]          -d秒数，命令几秒更新，默认是3秒，-i使top不显示任何闲置或僵死进程  -p通过指定监控进程id来监控某个进程的状态</li></ul><p>top选项之后我们可以对其进行操作</p><ul><li>P     以cpu使用率排序，默认就是此项</li><li>M     以内存使用率排序</li><li>N       以PID排序</li><li>q      退出top</li><li>u       监视特定用户</li><li>k       输入k回车在输入进程id来结束此进程</li></ul><h4 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h4><ul><li>netstat [选项]          -an 按一定顺序排列输出    -p显示哪个进程在调用 </li></ul><h3 id="RPM与YUM"><a href="#RPM与YUM" class="headerlink" title="RPM与YUM"></a>RPM与YUM</h3><h4 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h4><p>rpm用于互联网下载包的打包及安装工具，它包含在某些linux分发版中，它生成具有.RPM扩展名的文件，RPM是 RedHat Package Manager(RedHat软件包管理工具)的缩写，类似于windows的setup.exe</p><ul><li><p>rpm -qa|grep xx         查询已安装的rpm列表，也可以直接-q 软件包名查询    -i查询信息 -l查询软件包中的文件，-f查询文件所属的文件包</p></li><li><p>rpm -e rpm包名称       卸载rpm包</p></li><li><p>rpm -ivn RPM包全路径名称  -i=install安装 -v=verbose提示 -h=hash进度条</p></li></ul><h4 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h4><p>yum是一个shell前端软件包管理工具，基于RPM包管理，能够从指定的服务器下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包</p><ul><li>yum list|grep xx         查询yum服务器是否有需要安装的软件</li><li>yum -install xxx          安装指定的yum包</li></ul><h3 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>shell是一个命令行解释器，它为用户提供了一个向linux内核发送请求以便运行程序的界面系统级程序，用户可以用shell来启动，挂起，停止甚至是编写一些程序。</p><h4 id="脚本格式要求"><a href="#脚本格式要求" class="headerlink" title="脚本格式要求"></a>脚本格式要求</h4><ol><li>脚本以<code>#!/bin/bash</code>开头</li><li>脚本需要有可执行权限</li></ol><h4 id="脚本的常用执行方式"><a href="#脚本的常用执行方式" class="headerlink" title="脚本的常用执行方式"></a>脚本的常用执行方式</h4><ol><li>输入脚本的绝对路径或相对路径(需要+x权限)</li><li>sh+脚本(无需+x权限)</li></ol><h4 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>linux shell中的变量分为，系统变量和用户自定义变量</li><li>系统变量:$HOME,$PWD,$SHELL,$USER等等</li><li>显示当前shell中所有变量 set</li></ul><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li>定义变量:变量名=值</li><li>撤销变量:unset 变量</li><li>声明静态变量:readonly变量，注意：不能unset</li></ul><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><ul><li>变量名称可以由字母,数字，下划线组成，但不能以数字开头，</li><li>等号两侧不能有空格</li><li>变量名称一般习惯大写</li><li>A=`date`,运行里面的命令，并把结果返回给变量A</li><li>A=$(date)等价于A=`date`</li></ul><blockquote><p>shell脚本的多行注释   </p><p>:&lt;&lt;!</p><p> 内容 </p><p>！</p></blockquote><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><ul><li>export 变量名=变量值             将shell变量输出为环境变量/全局变量</li><li>source  配置文件                    让修改后的配置信息立即生效   sourse /etc/profile</li><li>echo $变量名                         查询环境变量的值</li></ul><h5 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h5><p>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量，如</p><p>./myshell.sh 100 200 这个就是一个执行shell的命令行，可以在myshell脚本中获得参数信息</p><ul><li>$n          n为数字，$0代表命令本身，$1-$9表示第1到第9个参数，第十个及其之上用大括号包含例如${10}</li><li>$*           表示命令行中的所有参数，将所有参数看成一个整体</li><li>$@          也表示命令行中的所有参数，将每个参数分开对待</li><li>$#            代表命令行中的所有参数</li></ul><h5 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h5><p>就是shell设计者预先定义好的变量，可以直接在shell脚本中使用</p><ul><li><p>$$              当前进程的进程号</p></li><li><p>$!               后台运行的最后一个进程的进程号</p></li><li><p>￥?            最后一次执行命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行了，如果这个值非零，证明上一个命令执行错误</p></li></ul><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><ul><li>$((运算式))或$[运算式]或者expr m + n</li><li>注意expr运算符间要有空格，如果希望将expr的运算结果赋给某个变量，需要将expr表达式用反引号``引起来,他的乘法是\*,即星号之前需要转义</li></ul><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><ul><li><p>if [ condition ]   then 如果为true要执行什么  else 不存在要执行什么   fi 结束   注意condition前后需要有空格，非空返回true，</p></li><li><p>if [ 条件判断式 ]</p><p>  then</p><p>  代码</p><p>  elif  [ 条件判断式 ]</p><p>  代码</p><p>  then</p><p>  代码</p><p>  fi</p></li></ul><p>常用判断条件</p><ul><li>字符串比较<ul><li>=</li></ul></li><li>两个整数的比较<ul><li>-lt小于</li><li>-le小于等于</li><li>-eq等于</li><li>-gt大于</li><li>-ge大于等于</li><li>ne不等于</li></ul></li><li>按照文件权限进行判断<ul><li>-r有读的权限</li><li>-w有写的权限</li><li>-x有执行的权限</li></ul></li><li>按照文件类型进行判断<ul><li>-f文件存在并且是一个常规的文件</li><li>-e文件存在</li><li>-d文件存在并是一个目录</li></ul></li></ul><h5 id="case"><a href="#case" class="headerlink" title="case"></a>case</h5><p>case $变量名 in</p><p>​    “值1”)</p><p>​        代码</p><p>;;</p><p>“值2”)</p><p>​    代码</p><p>;;</p><p>……..</p><p>*)</p><p>变量的值不存在执行此段代码</p><p>;;</p><p>esac</p><p>如下所示</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashcase $1 in"1")echo "周一";;"2")echo "周二";;"3")echo "周三";;"4")echo "周四";;"5")echo "周五";;"6")echo "周六";;"7")echo "周日";;*)echo "请输入正确的天数";;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>第一种写法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> 变量 in 值<span class="token number">1</span> 值<span class="token number">2</span> 值<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">do</span>程序done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#打印命令行的参数#$*是吧输入的参数当成一个整体，所以只会输出一句话for i in "$*"do        echo "num is $i"done#会输出两句for j in "$@"do        echo "num is $j"done#[root@xueshuai shellTest]# ./testFor1.sh 123 456#num is 123 456#num is 123#num is 456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种写法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>初始值<span class="token punctuation">;</span>循环控制条件<span class="token punctuation">;</span>变量变化<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">do</span>程序done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#从1加到100SUM=0for((i=1;i<=100;i++))do        SUM=$[$SUM+$i]doneecho "SUM=$SUM"#[root@xueshuai shellTest]# ./testFor2.sh #SUM=5050<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span><span class="token keyword">do</span>程序done<span class="token comment" spellcheck="true">//while关键字和中括号有空格，条件判断式与中括号也有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#从命令行输入一个数n，统计从1+...+n的值是多少SUM=0i=0while [ $i -le $1 ]do        SUM=$[$SUM+$i]        i=$[$i+1]doneecho "SUM=$SUM"#[root@xueshuai shellTest]# ./whileTest.sh 10#SUM=55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h4><ul><li>read[选项][参数]             选项:-p:指定读取值时的提示符；-t:指定读取值时等待的时间，如果没有在指定的时间内输入，就不等待了;参数:指定读取值的变量名</li></ul><p>例如</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#读取控制台输入的NUM1值read -p "请输入NUM1=" NUM1echo "$NUM1"#读取控制台输入一个NUM2值，必须在十秒内输入read -t 10 -p "请输入一个数NUM2" NUM2echo "$NUM2"#[root@xueshuai shellTest]# ./readTest.sh #请输入NUM1=1#1#请输入一个数NUM2#[root@xueshuai shellTest]# ./readTest.sh #请输入NUM1=1#1#请输入一个数NUM2=2#2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数分为系统函数和自定义函数</p><h5 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h5><p>系统函数：例如：basename返回路径最后/部分，一般用于获取文件名</p><ul><li>basename [路径] [后缀]，如果加上后缀，就表示在最后的部分删除后缀</li></ul><p>例如:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@xueshuai ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># basename /root/shellTest/caseTest.sh </span>caseTest.sh<span class="token punctuation">[</span>root@xueshuai ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># basename /root/shellTest/caseTest.sh t.sh</span>caseTes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dirname 文件绝对路径     一般用于获取路径部分</li></ul><p>例如</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@xueshuai ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dirname /root/shellTest/caseTest.sh</span>/root/shellTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h5><p>语法</p><pre class="line-numbers language-shell"><code class="language-shell"> function  方法名(){    行为代码    return 返回值;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用: 直接写方法名 值</p><p>例如:</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashfunction getSum() {#在方法中用   $数字   获取调用方法时的参数        SUM=$[$1+$2]        echo "和为=$SUM"}read -p "请输入第一个数n1=" n1read -p "请输入第二个数n2=" n2getSum $n1 $n2#[root@xueshuai shellTest]# ./funTest.sh #请输入第一个数n1=1#请输入第二个数n2=2#和为=3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号</p><p>单引号里面不存在变量，任何字符都会原样输出。转义字符也不可以</p><p>双引号里可以有变量，可以出现转义字符</p><p>例如:</p><pre class="line-numbers language-shell"><code class="language-shell">your_name="xueshuai"str="you are \"$your_name\"! \n"#-e开启转义echo -e $str#you are "xueshuai"! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><pre class="line-numbers language-shell"><code class="language-shell">$str1 $str2          （中间加空格）即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h5><pre class="line-numbers language-shell"><code class="language-shell">#           ${#str}                 变量为数组时，等价于${#str[0]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h5><ul><li>${str:1:4}              从第二个字符开始截取4个字符</li></ul><h5 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h5><p>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：</p><pre class="line-numbers language-shell"><code class="language-shell">string="runoob is a great site"#这里是反引号echo `expr index "$string" io`# 输出 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>bash支持一维数组，不支持多维数组，并没有限制数组的大小</p><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><ul><li><p>数组名=(值1 值2 … 值n)</p></li><li><p>数组名=(</p><p>  值1</p><p>  值2</p><p>  …</p><p>  )</p></li><li><p>数组名[0]=值1</p></li></ul><h5 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h5><ul><li>${数组名[下标]}          下标为@可以获取所有元素</li></ul><h5 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h5><pre class="line-numbers language-shell"><code class="language-shell"># 取得数组元素的个数length=${#array_name[@]}# 或者length=${#array_name[*]}# 取得数组单个元素的长度lengthn=${#array_name[n]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h4><p>要求，在每天凌晨两点半备份数据库文件</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#备份目录BACKUP=/www/xueshuai/db#获取当前时间DATETIME=$(date +%Y-%m-%d_%H%M%S)echo $DATETIME#文件地址HOST=localhost#数据库用户名DB_USER=root#数据库密码DB_PW=123456#要备份的数据库名DATABASE=guli#创建备份目录，如果不存在就创建，存在就使用,${BACKUP}加大括号只是为了和/分开[ ! -d "${BACKUP}/${DATETIME}" ] && mkdir -p "${BACKUP}/${DATETIME}"#备份数据库#                                                                       压缩  覆盖mysqldump -u${DB_USER} -p${DB_PW} --host=${HOST} -q -R --databases ${DATABASE} | gzip > ${BACKUP}/${DATETIME}/$DATETIME.sql.gz#将文件处理成tar.gz形式cd ${BACKUP}tar -zcvf $DATETIME.tar.gz ${DATETIME}#删除打包前文件rm -rf ${BACKUP}/${DATETIME}#删除十天前的备份文件                   调用其他的命令  \是格式要求find ${BACKUP} -atime +10 -name "*.tar.gz" -exec rm -rf {} \;echo "备份数据库${DATABASE} 成功"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><ol><li>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息，系统登录信息，系统安全信息，邮件相关信息，各种服务器相关信息</li><li>日志对安全来说很重要，，可以通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。</li><li>绝大部分日志保存在/var/log目录、</li></ol><h4 id="常用日志"><a href="#常用日志" class="headerlink" title="常用日志"></a>常用日志</h4><p>在/var/log下:</p><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td>boot.log</td><td>系统启动日志</td></tr><tr><td>cron</td><td>记录与系统定时任务相关的日志</td></tr><tr><td>cpus/</td><td>记录打印信息的日志</td></tr><tr><td>dmesg</td><td>记录了系统在开机时内核自检的信息，可以直接使用dmesg命令直接查看</td></tr><tr><td>btmp</td><td>记录登陆错误的日志，是二进制文件，不能直接vi查看，要使用lastb命令查看，</td></tr><tr><td>lastlog</td><td>记录所有用户最后一次登录时间的日志，也是二进制文件</td></tr><tr><td>mailog</td><td>记录邮件信息的日志</td></tr><tr><td>message</td><td>记录系统重要消息的日志，这个日志文件中会记录Linux系统的绝大多数信息，如果系统出现问题，首先就该检查此处</td></tr><tr><td>secure</td><td>记录验证和授权方面的信息，只要涉及账户和密码的程序都会记录，如系统的登录，ssh的登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录</td></tr><tr><td>wtmp</td><td>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件、是二进制文件</td></tr><tr><td>ulmp</td><td>记录当前已经登陆的用户的信息，会随着用户的登录和注销不断变化，只记录当前登录用户的信息，不能使用vi查看 ，而要使用w，who，users等命令查看。</td></tr></tbody></table><h4 id="日志管理服务rsyslogd"><a href="#日志管理服务rsyslogd" class="headerlink" title="日志管理服务rsyslogd"></a>日志管理服务rsyslogd</h4><ul><li>查询linux中的rsyslogd服务是否启动          ps aux | grep “rsyslog” | grep -v “grep”</li><li>查询rsyslogd服务的自启动状态                 systemctl list-unit-files | grep rsyslog</li></ul><p><strong>配置文件相关的信息说明</strong></p><p>编辑文件时的格式为: * . * 存放日志文件<br>其中第一个 * 代表日志类型，第二个 * 代表日志级别</p><p>1.日志类型分为:</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>auth</td><td>pam产生的日志</td></tr><tr><td>authpriv</td><td>ssh、ftp等登录信息的验证信息</td></tr><tr><td>corn</td><td>时间任务相关</td></tr><tr><td>kern</td><td>内核</td></tr><tr><td>lpr</td><td>打印</td></tr><tr><td>mail</td><td>邮件</td></tr><tr><td>mark(syslog)-rsyslog</td><td>服务内部的信息，时间标识</td></tr><tr><td>news</td><td>新闻组</td></tr><tr><td>user</td><td>用户程序产生的相关信息</td></tr><tr><td>uucp</td><td>unix to nuix copy主机之间相关的通信</td></tr><tr><td>local 1-7</td><td>自定义的日志设备</td></tr></tbody></table><p>2.日志级别分为：</p><table><thead><tr><th>级别</th><th>说明</th></tr></thead><tbody><tr><td>debug</td><td>有调试信息的，日志通信最多</td></tr><tr><td>info</td><td>—般信息日志，最常用</td></tr><tr><td>notice</td><td>最具有重要性的普通条件的信息</td></tr><tr><td>warning</td><td>警告级别</td></tr><tr><td>err</td><td>错误级别，阻止某个功能或者模块不能正常工作的信息</td></tr><tr><td>crit</td><td>严重级别，阻止整个系统或者整个软件不能正常工作的信息</td></tr><tr><td>alert</td><td>需要立刻修改的信息</td></tr><tr><td>emerg</td><td>内核崩溃等重要信息</td></tr><tr><td>none</td><td>什么都不记录</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列的最大值</title>
      <link href="/2022/050237875.html"/>
      <url>/2022/050237875.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/050237875/1651460952311.png" class title="队列的最大值"></em></p><p>解法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MaxQueue</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//普通队列</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> deque<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//单调队列</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> deque1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MaxQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deque1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> deque1<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//普通队列里面加进去</span>        deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一直删除到为递减</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque1<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            deque1<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        deque1<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deque1<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// deque.removeFirst();</span>            deque1<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// else {</span>        <span class="token comment" spellcheck="true">//     //不相等说明目前删除的这个值影响不到单调队列，</span>        <span class="token comment" spellcheck="true">//     deque.removeFirst();</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Your MaxQueue object will be instantiated and called as such: * MaxQueue obj = new MaxQueue(); * int param_1 = obj.max_value(); * obj.push_back(value); * int param_3 = obj.pop_front(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口的最大值</title>
      <link href="/2022/04308268.html"/>
      <url>/2022/04308268.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/04308268/1651306763266.png" class title="滑动窗口的最大值"></em></p><p>解法1:暴力遍历(O(n^2))</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len <span class="token operator">-</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2：单调队列</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> k <span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//滑动窗口向前推进   最大值已经不再窗口中了</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//删除最大的左边的内容</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//滑动窗口向前推进，加一个</span>            deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的压入、弹出序列</title>
      <link href="/2022/042838808.html"/>
      <url>/2022/042838808.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/042838808/1651156275975.png" class title="栈的压入、弹出序列"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pushed<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> popped<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//模拟入栈，看入栈元素是否与出栈序列的第一个相等，如果相等就出栈，说明这个元素是第一个出的，然后再判断之后的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pushed<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> popped<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> pushed<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> popped<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> pushed<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//栈不为空并且栈顶等于出栈数组当前值，出栈一个并且指针向下走一个</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> popped<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    q<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺时针打印矩阵</title>
      <link href="/2022/042854334.html"/>
      <url>/2022/042854334.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/042854334/1651136944786.png" class title="顺时针打印矩阵"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//1  2   3   4</span>        <span class="token comment" spellcheck="true">//5  6   7   8</span>        <span class="token comment" spellcheck="true">//9  10  11  12</span>        <span class="token comment" spellcheck="true">//13 14  15  16</span>        <span class="token comment" spellcheck="true">//行数</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//列数</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        if ( x == 0 || y == 0) {</span><span class="token comment" spellcheck="true">//            return new int[0];</span><span class="token comment" spellcheck="true">//        }</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>x <span class="token operator">*</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下标</span>        <span class="token keyword">int</span> sub <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上下左右边界,模拟左到右，上到下，右到左，下到上的过程</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bottom <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sub <span class="token operator">&lt;=</span> res<span class="token punctuation">.</span>length <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>sub<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                sub<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//本行走完(左到右)</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>sub<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                sub<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//本列走完(上到下)</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span> i <span class="token operator">>=</span> left <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>sub<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                sub<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//本行走完(右到左)</span>            bottom<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bottom<span class="token punctuation">;</span> i <span class="token operator">>=</span> top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>sub<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                sub<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//本列走完(下到上)</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> re <span class="token operator">:</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圆圈中最后剩下的数字</title>
      <link href="/2022/04269542.html"/>
      <url>/2022/04269542.html</url>
      
        <content type="html"><![CDATA[<p><em><img src="/2022/04269542/1650961274533.png" class title="圆圈中最后剩下的数字"></em></p><p>解法1:递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每一次 删掉第m个数，m的下一位作为头，就相当于将数组向前移动了m位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当有n-1个数字时，留下的那个数字的下标是多少，</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有n个数字的时候留下来的数字就是有n-1个数字留下的数字</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为s的连续正整数</title>
      <link href="/2022/042516028.html"/>
      <url>/2022/042516028.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p>​    <em><img src="/2022/042516028/1650893777284.png" class title="和为s的连续正数序列"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//       int[][] res = new int[1][n];</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从1，2开始，和初始为3</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等于</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> i<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res1<span class="token punctuation">[</span>p <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//大于等于都要操作，为了进行下一步</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">-=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//先j++在将j加上去</span>                sum <span class="token operator">+=</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有效的括号字符串</title>
      <link href="/2022/042460626.html"/>
      <url>/2022/042460626.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/042460626/1650805644257.png" class title="有效的括号字符串"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkValidString</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不需要存储字符，需要存储的是下标</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里以及下面需要存储坐标，不然后边无法判断左括号是否在右括号或者*的左边</span>                stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//'('栈的最大下标大于')'栈的最大下标，就说明不合法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪绳子Ⅰ</title>
      <link href="/2022/042150524.html"/>
      <url>/2022/042150524.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/042150524/1650538795593.png" class title="剪绳子Ⅰ"></em></p><p>解法1:动态规划</p><p>先暴力递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无法分割或者分割了都一样</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//先赋一个最小值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//切出部分</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">//切出部分乘剩余部分切出的最大值  //切出部分乘剩余部分不切割</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token function">rec</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>i <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为动态规划</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无法分割或者分割了都一样</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>j <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:贪心算法</p><hr><p>一根绳子一定会被切成两段，切分的乘积一般比原绳子的长度更长，如果绳子长度为2，不需要切分，为3也不需要切分，为4的话和二等价，六的话可以看成3个2和2个3，结果3×2&gt;2×2×2，在大的话也可以转换为2和3，结论为2优于3</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建乘积数组</title>
      <link href="/2022/042132269.html"/>
      <url>/2022/042132269.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/042132269/1650531131980.png" class title="构建乘积数组"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">constructArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上三角的乘积</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//再乘上下三角的乘积</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp <span class="token operator">*=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中出现次数超过一半的数字</title>
      <link href="/2022/04208317.html"/>
      <url>/2022/04208317.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/04208317/1650422167405.png" class title="数组中出现次数超过一半的数字"></em></p><p>解法1:因为出现次数超过一半,所以排序后，一定会出现在中点</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排序展开写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">qs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pat <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>pat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>pat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> less <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> more <span class="token operator">=</span> R<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                less<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>less<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>                L<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                more<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> L<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>more<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>less <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:</p><p>摩尔计数法(摩尔投票算法):只适用于超过一半以上</p><p>​        核心理念:类比战争，有一个国家的人数占所有国家的一半以上，最坏的情况是其他联合与其战斗，按人数一比一消耗，最后剩下的也只有最多人数的国家，所以我们需要让每个国家只与不同国家的人战斗即可。</p><p>​    代码实现:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一人上场，需要等待前一轮结束，也就是内耗完</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//上场</span>                res <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果这个人上场，已经有人了，判断这个人是不是一个国家的</span>            <span class="token comment" spellcheck="true">//是的话就站在一起</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不是则和一个同归于尽</span>                sum<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//最后上场已无敌军</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中数字出现的次数Ⅱ</title>
      <link href="/2022/041926354.html"/>
      <url>/2022/041926354.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041926354/1650374829424.png" class title="数组中数字出现的次数Ⅱ"></em></p><p>解法1:哈希表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Boolean<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//存数字和map中包括这个key么，如果包括就改为true，最后取出那个false就可以了</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//是false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:位运算</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得所有数字每一位有多少个1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//最后一位是1</span>                counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>                num <span class="token operator">>>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//res左移一位，然后或上counts数组对应的位</span>                res <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                res <span class="token operator">|=</span> counts<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中数字出现的次数</title>
      <link href="/2022/041917020.html"/>
      <url>/2022/041917020.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/041917020/1650358487876.png" class title="数组中数字出现的次数"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> ero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到的是那两个只出现一次的数字ab的异或，即a^b</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ero <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//ero即(a ^ b)必然有一个位置上是1</span>        <span class="token comment" spellcheck="true">//eor&amp;(~eor + 1);可以提取出一个不为0的二进制数的最后一位1</span>        <span class="token comment" spellcheck="true">//eor:   0110</span>        <span class="token comment" spellcheck="true">//~eor:  1001</span>        <span class="token comment" spellcheck="true">//~eor + 1:  1010</span>        <span class="token comment" spellcheck="true">//eor&amp;(~eor + 1):0010;</span>        <span class="token comment" spellcheck="true">//最后一位1</span>        <span class="token comment" spellcheck="true">//得到了某一位1就说明a和b在这一位上一定是不同的,这样才可以异或为1</span>        <span class="token keyword">int</span> rightOne <span class="token operator">=</span> ero<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>ero <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在某一位上不等于1的一类</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> rightOne<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a <span class="token operator">^=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// b = a ^ b ^ a;</span>        b <span class="token operator">=</span> ero <span class="token operator">^</span> a<span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不用加减乘除做加法</title>
      <link href="/2022/041919476.html"/>
      <url>/2022/041919476.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041919476/1650355432781.png" class title="不用加减乘除做加法"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 5 + 4 = 9</span>     <span class="token comment" spellcheck="true">// 0101 5</span>     <span class="token comment" spellcheck="true">// 0100 4</span>     <span class="token comment" spellcheck="true">// 1001 9</span>     <span class="token comment" spellcheck="true">//a^b  0001</span>     <span class="token comment" spellcheck="true">//a&amp;b  0100     (a &amp; b ) &lt;&lt; 1     1000</span>     <span class="token comment" spellcheck="true">//</span>     <span class="token comment" spellcheck="true">//a^b是无进位相加，a&amp;b是两个都为1时为1，可以模仿进位</span>     <span class="token comment" spellcheck="true">//a + b</span>        <span class="token comment" spellcheck="true">//终究还是用了加法</span>     <span class="token comment" spellcheck="true">//int n = (a^b) + ((a &amp; b) &lt;&lt; 1);</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//让b充当进位 </span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">,</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b <span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM笔记</title>
      <link href="/2022/041828161.html"/>
      <url>/2022/041828161.html</url>
      
        <content type="html"><![CDATA[<h1 id="JVM笔记"><a href="#JVM笔记" class="headerlink" title="JVM笔记"></a>JVM笔记</h1><h2 id="JVM概述"><a href="#JVM概述" class="headerlink" title="JVM概述"></a>JVM概述</h2><h3 id="JVM位置"><a href="#JVM位置" class="headerlink" title="JVM位置:"></a>JVM位置:</h3><p><em><img src="/2022/041828161/1650287742460.png" class title="JVM的位置"></em></p><h3 id="JVM整体结构"><a href="#JVM整体结构" class="headerlink" title="JVM整体结构"></a>JVM整体结构</h3><p><em><img src="/2022/041828161/1650287933268.png" class title="JVM的整体结构"></em></p><h3 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a>JVM的架构模型</h3><h4 id="1-基于栈的指令集架构"><a href="#1-基于栈的指令集架构" class="headerlink" title="1.基于栈的指令集架构"></a>1.基于栈的指令集架构</h4><p>​    <em><img src="/2022/041828161/1650288728553.png" class title="基于栈的指令集架构"></em></p><h4 id="2-基于寄存器的指令集架构"><a href="#2-基于寄存器的指令集架构" class="headerlink" title="2.基于寄存器的指令集架构"></a>2.基于寄存器的指令集架构</h4><p>​    <em><img src="/2022/041828161/1650288741666.png" class title="基于寄存器的指令集架构"></em></p><h3 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h3><h5 id="虚拟机的启动"><a href="#虚拟机的启动" class="headerlink" title="虚拟机的启动"></a>虚拟机的启动</h5><p>通过<code>引导类加载器(bootstrap class loader)</code>创建<code>初始类(initial class)</code>来完成启动过程，这个类是由虚拟机的具体实现指定的。</p><h5 id="虚拟机的执行"><a href="#虚拟机的执行" class="headerlink" title="虚拟机的执行"></a>虚拟机的执行</h5><p>运行中的Java虚拟机有着一个清晰的任务:执行Java程序</p><p>而执行java程序的时候，真正在执行的是一个叫<code>java虚拟机</code>的进程</p><h5 id="虚拟机的退出"><a href="#虚拟机的退出" class="headerlink" title="虚拟机的退出"></a>虚拟机的退出</h5><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误导致java虚拟机进程终止</li><li>某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许此次操作</li></ul><h3 id="JVM分类"><a href="#JVM分类" class="headerlink" title="JVM分类"></a>JVM分类</h3><ul><li><p>SUN Classic VM    </p><ul><li>只提供解释器，如果使用JIT编译器，解释器就不能工作，也就是只能二选一</li></ul></li><li><p>Exact VM      </p><ul><li>虚拟机可以知道内存中某个位置的数据具体是什么类型    具有热点探测与解释器编译器混合工作功能</li></ul></li><li><p>HotSpot VM    </p><ul><li>通过计数器找到最具编译价值代码，触发即时编译或栈上替换。(热点代码探测)</li><li>通过编译器与解释器协同工作，在最优化的程序相应时间与最佳性能执行中取得平衡</li></ul></li><li><p>BEA的JRockit VM</p><ul><li><p>专注于服务端应用</p><ul><li>不太关注程序启动速度，所以内部不包含解析器实现，都靠着即时编译器</li></ul></li><li><p>是世界上最快的JVM</p></li></ul></li><li><p>IBM 的  J9</p></li></ul><p>……</p><p>所有虚拟机遵循的原则:一次编译，到处允许</p><h2 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h2><h3 id="类加载器与类加载的过程"><a href="#类加载器与类加载的过程" class="headerlink" title="类加载器与类加载的过程"></a>类加载器与类加载的过程</h3><ul><li>类加载器子系统负责从文件系统或网络中加载Class文件，class文件在文件开头有特定的文件标识</li><li>ClassLoader只负责class文件的加载，由Execution Engine(执行引擎)决定</li><li>加载的类信息存放在方法区，除此之外，方法区还会存放运行时常量池信息，可能还包含字符串字面量和数字常量</li></ul><h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><em><img src="/2022/041828161/1650552573490.png" class title="类加载的过程"></em></p><ul><li><p>加载(Loading)</p><ol><li>通过一个类的全限定类名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ol></li><li><p>链接(Linking)</p><ul><li><p>验证(Verify)</p><ol><li>为了确保class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性不会危害虚拟机自身安全</li><li>包括四种验证;文件格式验证,元数据验证，字节码验证，符号引用验证</li></ol></li><li><p>准备(PrePare)</p><ol><li>为类变量分配内存并且设置该类变量的默认初值，即零值(例如int a = 5，在准备阶段a是等于0的，在initial阶段才会被赋值为5)</li><li>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化</li><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中</li></ol></li><li><p>解析(Resolve)</p><ol><li><p>将常量池内的符号引用转换为直接引用的过程，一般在初始化之后再执行</p></li><li><p>符号引用就是一组符号来描述引用的目标，直接引用就是直接指向目标的指针、相对偏移量、或一个间接定位找到目标的句柄</p></li></ol></li></ul></li><li><p>初始化（initialization）</p><ul><li>初始化阶段就是执行类构造器方法 <code>&lt;clinit&gt;()</code>的过程</li><li>此方法不需要定义，是javac编译器自动收集类中的所有类变量(静态变量)的赋值动作和静态代码块中的语句合并而来(没有静态变量赋值动作或静态代码块就不会有这个方法)</li><li>构造器方法中指令按语句在源文件中出现的顺序执行</li><li><code>&lt;clinit&gt;()</code>不同于 类的构造器(关联:构造器是虚拟机视角下的<code>&lt;init&gt;()</code>)</li><li>若该类具有父类，jvm会保证子类的<code>&lt;clinit&gt;()</code>执行前，父类的<code>&lt;clinit&gt;()</code>已经执行完毕</li><li>虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程下被同步加锁</li></ul></li></ul><p><em><img src="/2022/041828161/1650560125506.png" class></em></p><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>jvm支持的类加载器分为两种，分别为<code>引导类加载器(BootstrapClassLoader)</code>和<code>自定义类加载器(User-Defined ClassLoader)</code></p><p>自定义类加载器一般指程序中由开发人员自定义的一类加载器。但在Java虚拟机规范中将<code>所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器</code></p><p>常见的类加载器有三个:引导类加载器，扩展类加载器(Extension Class Loader)，系统类加载器(应用程序类加载器)(System Class Loader)</p><blockquote><p>因为扩展类加载器和系统类加载器可以理解为都间接继承于(不是)引导类加载器（其实是逻辑上的上下层关系），根据Java虚拟机规范，他们两个属于自定义类加载器，所以还是两种</p></blockquote><p><em><img src="/2022/041828161/1650644507597.png" class title="类加载器的分类"></em></p><blockquote><p>对于用户自定义类来说，默认使用系统类加载器进行加载</p><p>系统的核心类库，使用引导类加载器进行加载</p></blockquote><p>引导类加载器无法获取到</p><h5 id="引导类加载器（启动类加载器）"><a href="#引导类加载器（启动类加载器）" class="headerlink" title="引导类加载器（启动类加载器）"></a>引导类加载器（启动类加载器）</h5><ul><li>由C/C++语言实现，嵌套在JVM内部</li><li>它用来加载Java的核心库(JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容)，用于提供提供JVM自身需要的类</li><li>并不继承自java.lang.ClassLoader,没有父加载器</li><li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器</li><li>处于安全考虑，BootStrap启动类加载器只加载包名为java、javax、sun开头的类</li></ul><h5 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h5><ul><li>由java编写，由sun.misc.Launcher$ExtClassLoader实现(作为内部类)</li><li>派生于ClassLoader类</li><li>父类加载器为启动类加载器</li><li>从java.ext.dirs系统属性所指定的目录或从jdk安装目录的子目录中加载类库，如果用户创建的jar放在此目录下，也会自动由扩展类加载器加载</li></ul><h5 id="应用程序类加载器-系统类加载器"><a href="#应用程序类加载器-系统类加载器" class="headerlink" title="应用程序类加载器(系统类加载器)"></a>应用程序类加载器(系统类加载器)</h5><ul><li><p>java语言编写，由sun.misc.Launcher$AppClassLoader实现(作为内部类)</p></li><li><p>派生于ClassLoader类</p></li><li><p>父类加载器为启动类加载器</p></li><li><p>负责加载环境变量classpath或系统属性，java.class.path指定路径下的类库</p></li><li><p>该类加载的是程序中默认的类加载器，一般来说，java应用的类都是由他来完成加载</p></li></ul><h5 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h5><p>为什么需要自定义类加载器</p><ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><p>用户自定义类加载器的实现步骤</p><p><em><img src="/2022/041828161/1650648724070.png" class title="用户自定义类加载器的实现步骤"></em></p><h3 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h3><p>ClassLoader类是一个抽象类，其后所有的类加载器都直接或间接继承于ClassLoader(不包含启动类加载器，因为启动类加载器是由C++编写的)</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>java虚拟机对class文件采用的是按需加载的方式，加载某个类的class文件时使用的是双亲委派机制，即把请求交给父类处理，是一种任务委派模式</p><p>原理:</p><ol><li>如果一个类加载器收到了类加载请求，他并不会自己先去加载，而是把这个请求委托给父类的加载器执行</li><li>如果父类加载器还存在其他父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器</li><li>如果父类加载器可以完成类加载任务，就成功返回，反之子加载器才会尝试自己去加载</li></ol><p>例如用户自定义了一个java.lang.String类，在加载的时候，虚拟机就会把这个请求委托给父类执行，可以防止恶意用户篡改核心api；也可以避免类重复加载</p><h4 id="怎么打破双亲委派模型？"><a href="#怎么打破双亲委派模型？" class="headerlink" title="怎么打破双亲委派模型？"></a>怎么打破双亲委派模型？</h4><p>打破双亲委派机制则不仅<strong>要继承ClassLoader</strong>类，还要<strong>重写loadClass和findClass</strong>方法</p><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p>沙箱是一个限制程序运行的环境，他会将java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统的资源访问，包括<code>cpu,内存，文件系统，网络</code>，不同级别的沙箱对这些资源的访问的限制也可以不一样。</p><p>在java中将执行程序分为本地代码和远程代码两种，本地代码默认可信任，可访问本地一切自有，远程代码默认不可信，用户可以指定远程代码的权限</p><p>组成沙箱的基本条件:1.字节码校验器:确保Java类文件遵循Java语言规范,但核心类通不过字节码校验</p><p>​                                2.类装载器:可以防止恶意代码去干涉善意代码，守护了被信任的类库边界，将代码归入保护                                域，确定了代码可以进行那些操作</p><p>虚拟机为不同的类加载器载入得类提供不同的命名空间，相互之间不可见。</p><h3 id="判断是否是同一个类"><a href="#判断是否是同一个类" class="headerlink" title="判断是否是同一个类"></a>判断是否是同一个类</h3><ul><li>类的全限定类名一致。</li><li>加载这个类的类加载器相同</li></ul><h3 id="对类加载器的引用"><a href="#对类加载器的引用" class="headerlink" title="对类加载器的引用"></a>对类加载器的引用</h3><p>JVM必须知道一个类是由启动类加载器加载的还是由用户类加载器加载的，如果是后者，那么JVM<code>会将这个类加载器的一个引用作为类信息的一部分保存在方法区</code>，当解析一个类型到另一个类型的引用时，jvm需要保证这两个类型的类加载器是相同的</p><h3 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h3><p><em><img src="/2022/041828161/1650733653043.png" class title="类的主动使用和被动使用"></em></p><h2 id="运行时数据区内部结构"><a href="#运行时数据区内部结构" class="headerlink" title="运行时数据区内部结构"></a>运行时数据区内部结构</h2><blockquote><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>内存是硬盘和cpu的中间仓库和桥梁，承载着操作系统和应用程序的实时运行，java内存布局规定了java在运行过程中内存申请，分配，管理的策略，保证了Jvm的高效稳定运行，不同的jvm对于内存的划分方式和管理机制存在着部分差异。</p><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><p>线程是一个程序里的运行单元，jvm允许一个应用程序有多个线程来并行执行</p><p>在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。操作系统负责所有线程的安排调度到任何一个可用cpu上，一旦本地线程初始化成功，他就会调用Java线程中的run()方法。</p></blockquote><h3 id="程序计数器-PC寄存器（PC-Register）"><a href="#程序计数器-PC寄存器（PC-Register）" class="headerlink" title="程序计数器(PC寄存器（PC Register）)"></a>程序计数器(PC寄存器（PC Register）)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><em><img src="/2022/041828161/1651419461055.png" class></em></p><ul><li>pc寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码，由执行引擎读取下一条指令。</li><li>是运行速度最快的区域，但是空间很小(因为只需要存储下一条指令的地址)</li><li>每个线程都有自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</li><li>任何时间，一个线程都只有一个方法在执行，也就是所谓的当前方法，程序计数器会存储当前线程正在执行的Java方法的JVM指令地址，如果是在执行native方法也就是本地方法，则是未指定值(因为计数器是java层面的)。</li><li>他是程序控制流的指示器，分支，循环，跳转，异常处理，线程恢复等基础功能都需要依赖这个计数器来完成</li><li>他是唯一一个不会出现OutOfMemoryError的区域</li></ul><h4 id="使用PC寄存器存储字节码指令地址有什么用呢？（为什么使用PC寄存器记录当前线程的执行地址呢）"><a href="#使用PC寄存器存储字节码指令地址有什么用呢？（为什么使用PC寄存器记录当前线程的执行地址呢）" class="headerlink" title="使用PC寄存器存储字节码指令地址有什么用呢？（为什么使用PC寄存器记录当前线程的执行地址呢）"></a>使用PC寄存器存储字节码指令地址有什么用呢？（为什么使用PC寄存器记录当前线程的执行地址呢）</h4><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行</p><p>JVM字节码解释器需要通过改变PC寄存器的值来明确下一条应该执行什么字节码指令</p><h4 id="PC寄存器为什么会被设定为线程私有？"><a href="#PC寄存器为什么会被设定为线程私有？" class="headerlink" title="PC寄存器为什么会被设定为线程私有？"></a>PC寄存器为什么会被设定为线程私有？</h4><p>防止相互干扰</p><h4 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h4><p>并行是多个线程同时执行。</p><p>并发是快速切换几个线程，依次执行，像是并行，但其实是并发</p><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><blockquote><p>栈是运行时单位，堆是存储的单位</p></blockquote><h4 id="java虚拟机栈是什么"><a href="#java虚拟机栈是什么" class="headerlink" title="java虚拟机栈是什么"></a>java虚拟机栈是什么</h4><p>java虚拟机栈(Java Virtual Machine Stack) 早期也叫Java栈，每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个栈帧(stack Frame)(栈中的存储的基本单位) 对应着一次次方法调用</p><p>它是线程私有的</p><p><em><img src="/2022/041828161/1651507902449.png" class title="栈和栈帧"></em></p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>生命周期与线程一致</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>主管java程序的运行，保存方法的局部变量，部分结果，并参与方法的调用和返回</p><h4 id="栈的优点"><a href="#栈的优点" class="headerlink" title="栈的优点"></a>栈的优点</h4><ul><li><p>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</p></li><li><p>JVM直接对Java栈的操作只有两个：</p><ul><li>每个方法执行伴随着进栈(入栈，压栈)</li><li>执行结束后的出栈操作</li></ul></li><li><p>对于栈来说不存在垃圾回收问题，但会存在oom(内存溢出异常)</p></li></ul><h4 id="栈遇到的常见异常"><a href="#栈遇到的常见异常" class="headerlink" title="栈遇到的常见异常"></a>栈遇到的常见异常</h4><p>java虚拟机规范允许Java栈的大小是动态的或者固定不变的</p><ul><li>如果是不变的，如果线程请求分配的栈容量超过java虚拟机允许的最大容量，就会抛出StackOverflowError异常</li><li>如果是动态的，但在尝试扩展时无法申请到足够的内存，或是创建新线程时没有足够的内存去创建对应的虚拟机栈，就会抛出OutofMemoryError异常</li></ul><h4 id="设置栈内存大小"><a href="#设置栈内存大小" class="headerlink" title="设置栈内存大小"></a>设置栈内存大小</h4><p>参数-Xss来设置线程的最大栈空间，来决定函数调用的最大深度</p><h4 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a>栈的存储单位</h4><p>存储单位是<code>栈帧</code>，栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</p><ul><li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧，即只有当前正在执行的方法的栈帧(栈顶栈帧)是有效的，与<code>当前栈帧</code>对应的方法就是<code>当前方法</code>，定义这个方法的类就是<code>当前类</code>。</li><li>执行引擎运行的所有字节码指令只针对<code>当前栈帧</code>进行操作</li><li>如果在该方法中调用了其他方法，对应新的栈帧会被创建出来，放在栈的顶端，成为新的栈帧</li><li>不同线程中所包含的栈帧是不允许相互引用的</li><li>java函数的两种返回函数的方式，（正常的函数返回(return)，抛出异常，这两种都会导致栈帧被弹出）</li></ul><h4 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h4><p>栈帧中有什么，每个栈帧都有以下结构</p><ul><li>局部变量表(Local Variables)</li><li>操作数栈(operand Stack)(或表达式栈)</li><li>动态链接(Dynamic Linking)(或指向运行时常量池的方法引用)</li><li>方法返回地址(Return Address) (或方法正常退出或者异常退出的定义)</li><li>一些附加信息</li></ul><blockquote><p>后面三个也被统称为帧数据区</p></blockquote><h5 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h5><p>局部变量表也被称为本地变量表或者局部变量数组</p><ul><li><p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，包括基本数据类型，对象引用，以及returnAddress类型</p></li><li><p>建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题，因为不会有共享</p></li><li><p>表所需的容量大小是在编译器确定下来的，并保存在方法的Code属性的maximum local variables 数据项中，在方法运行期间是不会改变局部变量表的大小的。</p></li><li><p>方法嵌套的次数由栈的大小决定，一般来说，栈越大，方法嵌套可调用的次数就越多；局部变量表越大，栈帧越大，就会占用更多的空间。</p></li><li><p>局部变量表中的变量只在当前方法调用中有效，当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁</p></li><li><p>局部变量表最基本的存储单元是<code>Slot</code>(变量槽)</p></li><li><p>局部变量表里，32位以内的类型只占用一个slot(包括returnAddress类型)64位的类型(long和double)占用两个slot</p></li><li><p>JVM会为局部变量表中的每一个slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</p></li><li><p>当一个实例方法被调用时，他的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个slot上</p></li><li><p>需要访问局部变量表中一个64bit的局部变量值时，只需要使用<code>前一个索引</code>即可。</p></li><li><p>如果当前帧是由<code>构造方法</code>或者<code>实例方法</code>创建的，那么该对象引用this将会存在index为0的slot处，其余参数按照参数表顺序继续排列</p></li></ul><p><em><img src="/2022/041828161/1651597042314.png" class title="局部变量表slot"></em></p><blockquote><p>为什么this关键字不能在静态方法中调用</p><p>因为this变量不存在于当前方法的局部变量表中</p></blockquote><p>栈帧中的局部变量表中的槽位是可以重复利用的，如果一个局部变量超过了其作用域，那么在其作用域之后申明的局部变量就有可能会复用过期局部变量的槽位，以便达到节省资源的目的</p><p><em><img src="/2022/041828161/1651597828355.png" class title="slot的复用"></em></p><ul><li>在栈桢中，与性能调优最为密切的部分就是局部变量表，方法执行时，虚拟机使用局部变量表完成方法的传递</li><li>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或简介引用的对象都不会被gc</li></ul><h5 id="操作数栈-Opearnd-Stack"><a href="#操作数栈-Opearnd-Stack" class="headerlink" title="操作数栈(Opearnd Stack)"></a>操作数栈(Opearnd Stack)</h5><p>操作数栈也叫表达式栈，在方法执行的过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈和出栈</p><ul><li>操作数栈主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</li><li>操作数栈是一个工作区，随着方法的执行而创建，并且为空，长度保存在方法的Code属性中，为max_stack值</li><li>如果被调用的方法带有返回值，其返回值将会被压入当前栈帧的操作数栈中</li></ul><h6 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a>栈顶缓存技术</h6><p>​    因为基于栈架构的虚拟机所使用的零地址更加紧凑，但完成一项指令需要更多的出栈入栈指令，意味着需要更多的指令分派次数和内存读写次数，也就是会影响执行速度，因此，hotspot设计者提出了栈顶缓存技术，<code>将栈顶元素全部缓存在物理cpu寄存器中，以次降低对内存的读写次数，提升效率</code></p><h5 id="动态链接-指向运行时常量池的方法引用"><a href="#动态链接-指向运行时常量池的方法引用" class="headerlink" title="动态链接(指向运行时常量池的方法引用)"></a>动态链接(指向运行时常量池的方法引用)</h5><ul><li><p>每个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用，目的是为了支持当前方法的代码能实现动态链接</p></li><li><p>在java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用，保存在class文件的常量池里，比如，描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</p></li></ul><h5 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h5><h6 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h6><p>JVM中将符号引用转换为调用方法的直接引用与方法的绑定机制有关</p><ul><li>静态链接:当字节码文件被装载进JVM内部时，如果被调用的方法在编译器可知，且运行期保持不变时，这种情况下的调用称为静态链接</li><li>动态链接:如果被调用的方法在编译期无法被确定下来，也就是说，只有在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，所以叫做动态链接</li></ul><p>对应的方法绑定机制为:早期绑定和晚期绑定，只发生一次</p><p>对应的方法为:虚方法和非虚方法</p><p>静态方法，私有方法，final方法，实例构造器，父类方法都是非虚方法</p><p>其余方法为虚方法</p><p>虚拟机中提供了几条方法调用指令:</p><ul><li>普通调用指令<ol><li>invokestatic     调用静态方法，解析阶段确定唯一方法版本</li><li>invokespecial   调用init方法，私有及父类方法，解析阶段确定唯一方法版本</li><li>invokevirtual    调用所有虚方法</li><li>invokeinterface  调用接口方法</li></ol></li><li>动态调用指令<ul><li>invokedynamic    动态解析出需要调用的方法，然后执行</li></ul></li></ul><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本，其中invokestatic和invokespecial指令调用的方法称为非虚方法，其余(final修饰的除外)称为虚方法</p><hr><p>方法返回地址中存放着该方法的pc寄存器的值</p><p>方法退出后都会返回到该方法被调用的位置，方法正常退出时，<code>调用者的pc计数器的值作为返回地址。即调用该方法的指令的下一条指令的地址</code>，而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息</p><p>返回指令包括ireturn(boolean，byte，char，short，int)，lreturn，freturn，dreturn，areturn(引用数据类型)，return(声明为void)</p><h5 id="java语言中方法重写的本质"><a href="#java语言中方法重写的本质" class="headerlink" title="java语言中方法重写的本质"></a>java语言中方法重写的本质</h5><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作c</li><li>如果在类型c中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束，如果不通过，则返回java.lang.ⅠllegalAccessError异常(非法访问异常)</li><li>否则，按照继承关系从下往上依次对c的各个父类进行第二步的搜索和验证过程</li><li>如果始终没有找到，则抛出java.lang.AbstractMethodError异常</li></ol><p>因为每次调用虚方法都需要去上边找，会比较麻烦，所以JVM提供了<code>虚方法表</code>，每个类都有一个自己的虚方法表，例如类a继承类b，假设类b继承object类，类b重写了toString，那么类a调用toString的时候会直接调用类b，假如类b没有重写，那么类a虚方法表中的toString方法就会直接指向的object类，而不用去父类中一层层去找</p><p><em><img src="/2022/041828161/1652627130345.png" class title="虚方法表"></em></p><h5 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h5><p>栈帧中还允许携带与java虚拟机实现相关的一些附加信息，例如对程序调试提供支持的信息</p><h5 id="一些面试题"><a href="#一些面试题" class="headerlink" title="一些面试题"></a>一些面试题</h5><p>分配的栈内存越大越好么？</p><ul><li>不是，过大的栈内存会影响到其余区域的大小</li></ul><p>垃圾回收是否会涉及到虚拟机栈？</p><ul><li>不会，栈只有进栈，出栈 </li></ul><p>方法中定义的局部变量是否线程安全？</p><ul><li>具体问题具体分析   如果方法内部局部变量没有逃离方法的作用范围它就是安全的，是线程私有的 ，不会产生在多个线程下产生线程干扰。<br>   如果局部变量引用了对象，并逃离方法的作用范围，它就不是线程安全的。<br>  （例如：参数变量不是线程安全，会被返回得局部变量不是线程安全的，他们都逃离了方法的作用范围） </li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li>Java虚拟机栈用于管理Java方法的调用，而本地方法用于管理本地方法的调用</li><li>本地方法栈也是线程私有的</li><li>允许被实现成固定或者是可动态扩展的内存大小(在内存溢出方面是相同的)</li><li>本地方法是用C语言实现的</li><li>它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><ul><li>一个JVM实例<code>只存在一个</code>堆内存，堆也是Java内存管理的核心区域</li><li>Java堆区在JVM启动时即被创建了，其空间大小也就确定了，是JVM管理的最大一块内存空间<ul><li>堆空间的大小是可以调节的</li></ul></li><li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区(TLAB)</li><li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向的是对象或者数组在堆中的位置</li><li>在方法结束后，堆中的对象<code>不会马上被移除</code>，仅仅在垃圾收集的时候才会被移除(意思是不会被马上移除，当堆空间不足之后执行垃圾回收才会移除，如果马上移除的话，gc的频率就会过高)</li><li>堆是GC执行垃圾回收的重点区域</li></ul><h4 id="堆空间的细分"><a href="#堆空间的细分" class="headerlink" title="堆空间的细分"></a>堆空间的细分</h4><p>现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为:</p><ul><li>Java7及之前堆内存<code>逻辑上</code>分为三部分:新生区+养老区+永久区<ul><li>新生区又被分为eden(伊甸)区和Survivor(幸存者)区    幸存者区又分为幸存者1区(from区)和幸存者2区(to区)</li></ul></li><li>Java8及之后堆内存<code>逻辑上</code>分为三部分:新生区+养老区+元空间</li><li>新生区=新生代=年轻代            养老区=老年区=老年代           永久区=永久代</li><li>堆大小=新生区+养老区，元空间或者永久区有他自己的大小</li><li> <code>在JDK1.8版本废弃了永久代，替代的是元空间（MetaSpace），元空间与永久代上类似，都是方法区的实现，他们最大区别是：元空间并不在JVM中，而是使用本地内存。</code> </li></ul><h4 id="为什么移除永久代"><a href="#为什么移除永久代" class="headerlink" title="为什么移除永久代"></a>为什么移除永久代</h4><p>移除永久代原因：为融合HotSpot JVM与JRockit VM（新JVM技术）而做出的改变，因为JRockit没有永久代。<br>有了元空间就不再会出现永久代OOM问题了。</p><p>永久代设置空间大小是很难确定的，如果动态加载类过多，容易产生oom，，另外如果元空间太小，那么会频繁的进行fullGC，而fullGC的成本是非常高的，导致效率降低</p><h4 id="堆空间大小的设置"><a href="#堆空间大小的设置" class="headerlink" title="堆空间大小的设置"></a>堆空间大小的设置</h4><ul><li>堆空间的大小在启动时就创建了，大小也设置好了，可以通过<code>&quot;-Xmx&quot;</code>和<code>&quot;-Xms&quot;</code>来进行设置，不写单位默认字节<ul><li>“-Xms”用于表示堆区的起始内存 等价于-XX:InitialHeapSise</li><li>“-Xmx”用于表示堆区的最大内存 等价于-XX:MaxHeapSize<ul><li>-X是Jvm运行参数</li></ul></li></ul></li><li>一旦堆区的内存超过了指定的最大内存，将会抛出OutOfMemoryError异常</li><li>通常会将 -Xms与-Xmx两个参数配置相同的值，目的在于<code>能够在java垃圾回收机制清理完堆区之后不需要重新分隔计算堆区的大小，从而提高性能</code>(使用时如果内存不够，堆会不断扩容，不需要的时候有需要释放，会给gc带来压力，如果将默认和最大都直接设置成需要的数值，因为在生产环境中一台机器跑一个Java程序，不需要给其他机器腾出空间)</li><li>默认情况下  初始内存大小为:电脑内存大小/64，而最大内存大小为:电脑内存大小/4</li></ul><h5 id="一些关于堆的代码"><a href="#一些关于堆的代码" class="headerlink" title="一些关于堆的代码"></a>一些关于堆的代码</h5><pre class="line-numbers language-java"><code class="language-java">            <span class="token comment" spellcheck="true">//JVM中堆内存总量</span>        <span class="token keyword">long</span> initialMemory <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//JVM试图使用的最大堆内存量</span>        <span class="token keyword">long</span> maxMemory <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-Xms:"</span> <span class="token operator">+</span> initialMemory <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-Xmx:"</span> <span class="token operator">+</span> maxMemory<span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里求得的内存总量为(永久代)元空间加伊甸园区和幸存者一区幸存者二区中的其中一个</p></blockquote><h5 id="查看设置的参数"><a href="#查看设置的参数" class="headerlink" title="查看设置的参数"></a>查看设置的参数</h5><p>方式1: 1. jps  2.jstat -gc 进程id</p><p>方式2:  在参数配置项中加入<code>-xx: + PrintGCDetails</code></p><h4 id="年轻代和老年代"><a href="#年轻代和老年代" class="headerlink" title="年轻代和老年代"></a>年轻代和老年代</h4><h5 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h5><p>存储在JVM中的JAVA对象可以被划分为两类</p><ul><li>一类是生命周期较短的顺瞬时对象，这类对象的创建和消亡都非常迅速</li><li>另外一类对象的生命周期却非常长，在某些极端的情况还能够与JVM的生命周期保持一致</li></ul><p>JAVA堆进一步划分的话，可以划分为年轻代(YoungGen)和老年代(OldGen)</p><p>其中年轻代又可以划分为Eden空间，Survivor0空间和Survivor1空间(有时也叫做form区和to区)</p><h5 id="配置新生代和老年代"><a href="#配置新生代和老年代" class="headerlink" title="配置新生代和老年代"></a>配置新生代和老年代</h5><ul><li>默认<code>-XX:NewRatio=2</code>,表示新生代占1，老年代占2，即新生代占整个堆的1/3</li><li>可以修改-XX:NewRatio=4,表示新生代占1，老年代占4</li><li>在cmd命令行中，可以通过<code>jinfo -flag NewRatio</code> 查看占比</li><li>Eden空间和另外两个Survivor空间缺省所占比例是<code>8:1:1</code>，也可以通过<code>-XX:SurvivorRatio=?</code>调整空间比例</li><li><code>几乎所有</code>的Java对象都是在Eden区被new出来的</li><li>绝大部分的Java对象的销毁都是在新生代进行了<ul><li>IBM公司的专门研究表明，新生代80%的对象都是”朝生夕死”</li></ul></li><li>可以使用选项<code>&quot;-Xmn&quot;</code>设置新生代最大内存大小<ul><li>一般默认即可</li></ul></li></ul><h4 id="对象分配过程"><a href="#对象分配过程" class="headerlink" title="对象分配过程"></a>对象分配过程</h4><p>为新对象分配内存是一件非常严谨和复杂的任务，不仅要考虑如何分配，在那里分配，还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片</p><p>​    步骤如下:</p><ol><li>new的对象先放在伊甸园区，此区<code>有大小限制</code></li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(minor GC 或者称为YGC),将伊甸园区中的不再被其他对象所引用的对象进行销毁，再加载新的对象到伊甸园区</li><li>然后将伊甸园中剩余对象移动到幸存者0区(from)，年龄计数器加一</li><li>如果再次触发垃圾回收，会回收伊甸园区和幸存者0区中的垃圾，然后将伊甸园区和幸存者0区中没有回收的放入幸存者1区（to)，年龄计数器加1。这个时候from区会变空，然后from区变为下次gc时的to区，to区变为from区</li><li>什么时候去养老区呢？可以设置次数，默认<code>15</code>次，即当gc时，碰到了from区的年龄计数器为15并且本次不会被gc，就会将其放入养老区<ul><li>可以设置参数: <code>-XX:MaxTenuringThreshold=&lt;N&gt;</code>进行设置</li></ul></li><li>在养老区，相对悠闲，当养老区内存不足之后，再次触发GC:major GC或者FGC(Full GC),进行养老区的内存清理</li><li>若养老区执行了Major GC之后发现仍然无法进行对象的保存，就会产生OOM异常(java.lang.OutOfMemoryError:java heap space)</li></ol><blockquote><p>幸存者区不存在YGC，但是存在GC，在触发YGC的时候，会将Eden区和幸存者区一起进行回收</p><p>针对幸存者s0，s1区的总结:复制之后有交换，谁空谁是to</p><p>垃圾回收频繁出现在新生区收集，很少在养老区，几乎不在永久区/元空间</p></blockquote><p>上述是对象分配的一般过程，但是在实际分配对象时，会出现一些特殊情况。</p><ol><li><p>对象过大，在进行YGC之后依然放不下(即对象的大小大于伊甸园区的大小，因为YGC之后伊甸园区为空)，则被判断为超大对象，这个时候就需要判断old区(老年代)是否放得下，如果老年代可以放下，就放到老年代，如果老年代也放不下，那么先对老年代进行一次majorGC(FGC)，之后如果能放下就放入老年代，如果还是放不下，就会报oom错误(堆空间溢出)</p></li><li><p>如果YGC的时候，发现将要到达to区的伊甸园区对象过大，那么就直接将此对象晋升到老年代</p><p> <em><img src="/2022/041828161/1653576480545.png" class title="对象的分配和一些特殊情况"></em></p></li></ol><h4 id="Minor-GC-Major-GC-和Full-GC"><a href="#Minor-GC-Major-GC-和Full-GC" class="headerlink" title="Minor GC Major GC 和Full GC"></a>Minor GC Major GC 和Full GC</h4><p>JVM在进行GC时，并非每次都对上面三个内存区域(新生代，老年代;方法区)一起回收的，大部分时候的回收都指的是新生代</p><blockquote><p>方法区是一个概念，元空间是方法区的实现</p></blockquote><p>针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型，一种是部分收集(Partial GC)，一种是整堆收集(Full GC)</p><ul><li>部分收集:不是完整收集整个Java堆的垃圾收集，其中又分为:<ul><li> 新生代收集(Minor GC 或Young GC):只是新生代的垃圾收集</li><li>老年代收集(Major GC 或 Old GC):只是老年代的垃圾收集<ul><li>目前只有CMS GC会有单独收集老年代的行为</li><li><code>注意:很多时候Major GC 会和 Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收</code></li></ul></li><li>混合收集(Mixed GC ): 收集整个新生代以及部分老年代的垃圾收集<ul><li>目前只有G1 GC 会有这种行为</li></ul></li></ul></li><li>整堆收集(Full GC):收集整个Java堆和方法区的垃圾收集</li></ul><h5 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h5><ul><li><p>当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden满，Survivor满不会引发GC(每次Minor GC会清理年轻代内存)</p></li><li><p>因为Java对象<code>大多都具备朝生夕灭的特性</code>所以Minor GC非常频繁，一般回收速度也比较快</p></li><li><p>Minor GC会引发STW(stop the world)，暂停其他用户的线程，等垃圾回收结束，用户线程才回复运行</p></li></ul><h5 id="老年代GC-Major-GC-Full-GC"><a href="#老年代GC-Major-GC-Full-GC" class="headerlink" title="老年代GC(Major GC /Full GC)"></a>老年代GC(Major GC /Full GC)</h5><ul><li>指发生在老年代的GC，对象从老年代消失时，我们说“Major GC”或“Full GC”发生了</li><li>出现Major GC，经常会伴随着至少一次的Minor GC(非绝对，在Parallel Scavenge收集器的收集策略里就有直接进行Major的策略选择过程)<ul><li>也就是在老年代空间不足时，会尝试先触发Minor GC，如果之后空间还是不足，则触发Major GC(即，老年代空间不足，现在直接放对象就会oom，但是如果进行一次Minor GC，那么对象就可以放在Eden区中，也就是避免了一次Major GC)</li></ul></li><li>Major GC的速度一般会比Minor GC 慢十倍以上，STW的时间更长</li><li>如果Major GC后内存还是不足，就报OOM了</li></ul><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><blockquote><p>Full GC是开发或调优中尽量避免的，这样暂停时间会短一些</p></blockquote><p>触发Full GC执行的情况有如下五种:</p><ol><li>调用System.gc()时，系统建议执行Full GC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC后进入老年代的对象的平均大小大于老年代的可用内存</li><li>由Eden区survivor0区向survivor1区复制时，对象大小大于s1区可用内存，则把该对象转到老年代。且该老年代的可用内存小于该对象大小</li></ol><h4 id="为什么要把Java堆分代"><a href="#为什么要把Java堆分代" class="headerlink" title="为什么要把Java堆分代"></a>为什么要把Java堆分代</h4><p>经研究，不同对象的生命周期不同，70%-99%的对象是临时对象，分区便于GC，如果不分代，GC的时候就会遍历所有的对象，如果分代的话，我们将临时对象放在一个区内，GC就会优先回收这些对象，可以腾出空间</p><h4 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h4><p>针对不同年龄段的对象分配原则如下</p><ul><li>优先分配到Eden</li><li>大对象直接分配到老年代<ul><li>尽量避免程序中出现过多大对象</li></ul></li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断<ul><li>如果幸存者区中相同年龄的对象的总和大于幸存者区空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到阈值年龄</li></ul></li><li>空间分配担保<ul><li>-XX:HandlePromotionFailure</li></ul></li></ul><h4 id="TLAB"><a href="#TLAB" class="headerlink" title="TLAB"></a>TLAB</h4><p>TLAB(Thread Local Allocation Buffer)即线程本地分配缓存</p><h5 id="为什么会有TLAB"><a href="#为什么会有TLAB" class="headerlink" title="为什么会有TLAB"></a>为什么会有TLAB</h5><ul><li>堆区是线程共享区域，任何线程都可以访问到堆区中的共享区域</li><li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li><li>为避免多个线程操作统一地址，需要使用加锁等机制，进而影响分配速度</li></ul><h5 id="什么是TLAB"><a href="#什么是TLAB" class="headerlink" title="什么是TLAB"></a>什么是TLAB</h5><ul><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓冲区域，它包含在Eden中,即 <code>每个线程在 Java 堆中预先分配一小块内存，然后在给对象分配内存的时候，直接在自己的这块”私有“内存中进行分配，当这部分用完之后，再分配新的”私有“内存</code>。  这部分 buffer 是从堆中划分出来的，但是本地线程独享的 </li><li>多线程同时分配内存时，使用TLAB可以避免一系列的线程安全问题，同时还能提升内存分配的吞吐量，因此我们可以将这种内存分配的方式称为快速分配策略</li><li>所以说，因为有TLAB，堆内存并不完全共享</li></ul><blockquote><p>TLAB线程独享是针对分配动作，至于读取，垃圾回收则是线程共享的</p></blockquote><h5 id="TLAB的问题"><a href="#TLAB的问题" class="headerlink" title="TLAB的问题"></a>TLAB的问题</h5><p>是由于TLAB太小导致的，因为Eden本身就很小，TLAB占有1%的Eden区</p><p>比如一个线程的 TLAB 空间有 100KB，其中已经使用了 80KB，当需要再分配一个 30KB 的对象时，就无法直接在 TLAB 中分配，遇到这种情况时有两种处理方案：</p><ol><li>直接在堆内存中对该对象进行内存分配。</li><li>废弃当前的 TLAB，重新申请 TLAB 空间再次进行内存分配。</li></ol><p>如果是方案一，假设TLAB仅剩1KB空间，那么后续大多数对象都需要在堆内分配，</p><p>如果是方案二,有可能会有频繁的废弃TLAB和申请TLAB的情况，而分配TLAB也是需要并发控制的，这就失去了TLAB存在的意义。</p><p>所以，虚拟机定义了一个<code>refill_waste</code>值，可以翻译为<code>最大浪费空间</code></p><p>当 TLAB 剩余空间不足时，</p><ol><li>若请求分配的内存大于 refill_waste，会选择在堆内存中分配。</li><li>若请求分配的内存小于 refill_waste，会选择废弃当前的 TLAB，重新创建 TLAB 进行对象内存分配。</li></ol><p>例如，TLAB总空间100KB，使用了80KB，剩余20KB，如果设置的refill_waste的值为25KB，那么如果新对象的内存大于25KB，则直接堆内存分配，如果小于25KB，则会废弃掉之前的那个TLAB，重新分配一个TLAB空间，给新对象分配内存。 </p><blockquote><p>如果对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用<code>加锁机制</code>确保数据操作的原子性，从而直接在Eden空间分配内存</p></blockquote><h5 id="一些调整TLAB的参数"><a href="#一些调整TLAB的参数" class="headerlink" title="一些调整TLAB的参数"></a>一些调整TLAB的参数</h5><p><code>-XX:UseTLAB</code>设置是否开启TLAB空间，默认开启</p><p><code>-XX:TLABWasteTargetPercent</code>设置TLAB空间所占用Eden空间的百分比大小</p><h4 id="堆中常用参数"><a href="#堆中常用参数" class="headerlink" title="堆中常用参数"></a>堆中常用参数</h4><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-XX: +PrintFlagsInitial</td><td>查看所有的参数的默认初始值</td></tr><tr><td>-XX: +PrintFlagFinal</td><td>查看所有的参数的最终值，(可能存在修改，不是初始值)</td></tr><tr><td>-Xms</td><td>初始堆空间内存(默认为物理内存的1/64)</td></tr><tr><td>-Xmx</td><td>最大堆空间内存(默认为物理内存的1/4)</td></tr><tr><td>-Xmn</td><td>设置新生代大小(初始值和最大值)</td></tr><tr><td>-XX:NewRatio</td><td>配置新生代与老年代在堆结构中的占比</td></tr><tr><td>-XX:SurvivorRatio</td><td>设置新生代中Eden和S0/S1空间的比例</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>设置新生代垃圾的最大年龄</td></tr><tr><td>-XX:+PrintGCDetails</td><td>输出详细的GC日志    打印GC简要信息1.-XX:+PrintGC 2.-verbose:gc</td></tr><tr><td>-XX:HandlePromotionFailure</td><td>是否设置空间分配担保</td></tr></tbody></table><h4 id="XX-HandlePromotionFailure"><a href="#XX-HandlePromotionFailure" class="headerlink" title="-XX:HandlePromotionFailure"></a>-XX:HandlePromotionFailure</h4><p>在发生minor GC之前，虚拟机会检查老年代最大可用连续空间，是否大于新生代所有对象的总空间</p><ul><li>如果大于，则此次minor GC是安全的</li><li>如果小于，则虚拟机会查看-XX:HandlePromotionFailure设置值是否允许担保失败<ul><li>如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小<ul><li>如果大于，则会尝试一次Minor GC，但这次Minor GC依然是有风险的</li><li>如果小于，则改为进行一次full GC</li></ul></li><li>如果HandlePromotionFailure = false，则改为进行一次full GC</li></ul></li></ul><p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察OpenJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在源码中以及不会使用它，</p><p>改动为:<code>只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC</code></p><h4 id="堆是分配对象存储唯一的选择么"><a href="#堆是分配对象存储唯一的选择么" class="headerlink" title="堆是分配对象存储唯一的选择么"></a>堆是分配对象存储唯一的选择么</h4><p>不一定，有一种特殊情况，经过<code>逃逸分析</code>之后发现，一个对象没有逃逸出方法的话，那么就可能被优化成栈上分配，这样就无需在堆上分配内存，也无需进行垃圾回收了，这也是最常见的堆外存储技术 </p><p>在基于OpenJDK深度定制的TaoBaoVM，其中创新的GCIH(GC invisible heap)技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的java对象，以次达到降低GC的回收频率和提示GC的回收效率的目的</p><p><code>看本章末尾</code></p><h4 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h4><p>如何将堆上的对象分配到栈，需要使用逃逸分析手段</p><ul><li>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法</li><li>通过逃逸分析，JavaHotspot编译器能够分析出一个新的对象的引用的适用范围从而决定是否要将这个对象分配到栈上</li><li>逃逸分析的基本行为就是分析对象动态作用域<ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸</li><li>当一个对象在方法中被定义后，他被外部方法所引用，则认为发生逃逸，例如作为参数传递到其他地方中</li></ul></li></ul><p><em><img src="/2022/041828161/1653755434584.png" class title="没有发生逃逸"></em></p><p><em><img src="/2022/041828161/1653755484823.png" class title="发生逃逸"></em></p><blockquote><p>如何快速判断是否发生了逃逸，就看new的对象的<code>实体</code>是否有可能在方法外被调用</p></blockquote><p>在JDK7及之后，HotSpot中默认就已经开启了逃逸分析。</p><p>如果使用的是较早的版本，开发人员可以通过:</p><ul><li>“-XX: +DoEscapeSnalysis”显式开启逃逸分析</li><li>通过选项”-XX: +PrintEscapeAnalysis”查看逃逸分析的筛选结果</li></ul><p>结论：开发中能使用局部变量的，就不要在方法外定义</p><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>通过逃逸分析，编译器可以对代码做如下优化:</p><ol><li><p>栈上分配。将堆分配转化为栈分配，如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能使栈分配的候选，而不是堆分配。</p></li><li><p>同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步</p><ol><li><p>线程同步的代价是相当高的，同步的后果是降低并发性和性能，在动态编译同步块的时候，JIT编译器可以通过借助逃逸分析来判断<code>同步块使用的锁对象是否只能被一个线程访问而没有被发布到其他线程</code>，如果没有，那么JIT就会取消掉对这部分代码的同步，可以提高并发性和性能，这个取消同步的过程就叫同步省略，也叫锁清除</p><p> <em><img src="/2022/041828161/1653921191877.png" class title="同步省略"></em></p></li></ol></li><li><p>分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分(或全部)可以不存储在内存，而是存储在CPU寄存器中</p><ol><li><p><code>标量</code>是指一个无法再分解成更小数据的数据，Java中的原始数据类型就是标量</p></li><li><p>相对的，那些还可以分解的数据叫做聚合量，Java中的对象就是聚合量，因此可以分解成其他的标量和聚合量</p></li><li><p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么，经过JIT优化，就会把这个对象拆解成若干个其中包含若干个成员变量来替换，这个过程就叫做标量替换</p><p> <em><img src="/2022/041828161/1653922903724.png" class></em></p><p> <em><img src="/2022/041828161/1653923350499.png" class></em></p></li><li><p>标量替换参数设置 ：<code>-XX:+EliminateAllocations</code>开启了标量替换(默认打开)，允许将对象打散分配在栈上</p></li></ol></li></ol><blockquote><p>标量替换可以视为栈上分配的一种特例</p></blockquote><p>但是，逃逸分析技术并不成熟，在HotSpot虚拟机中并未采用逃逸分析，所以说，<code>对象实例都是分配到堆上</code>，但是会发生标量替换，被打散后的标量作为的局部变量储存在栈中。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><h4 id="堆，栈，方法区的交互关系"><a href="#堆，栈，方法区的交互关系" class="headerlink" title="堆，栈，方法区的交互关系"></a>堆，栈，方法区的交互关系</h4><p><em><img src="/2022/041828161/1653925516615.png" class title="交互关系"></em></p><p><em><img src="/2022/041828161/1653925593009.png" class title="交互关系2"></em></p><h4 id="什么是方法区"><a href="#什么是方法区" class="headerlink" title="什么是方法区"></a>什么是方法区</h4><p>《Java虚拟机规范》中提到，尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会去选择垃圾收集或者进行压缩，但对于hotspot虚拟机来说，方法区有一个别名叫做Non-Heap(非堆)，目的就是和堆分开</p><ul><li>方法区与堆一样，是各个线程共享的内存区域</li><li>方法区在JVM启动的时候被创建，并且它的实际物理内存空间中和Java堆区一样都可以是不连续的</li><li>方法区的大小，就跟堆空间一样，可以固定大小或者可扩展</li><li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会报内存溢出错误Java.lang.OutOfMemoryError:Permen space(jdk7及之前)或者Java.lang.OutOfMemoryError:Metaspace(jdk8及之后)</li><li>关闭Jvm就会释放这个区域的内存  </li></ul><h4 id="方法区的演进"><a href="#方法区的演进" class="headerlink" title="方法区的演进"></a>方法区的演进</h4><p>在JDK7以前，习惯把方法区称为永久代。JDK8开始，使用元空间取代了永久代</p><p>在本质上，方法区和永久代并不等价，仅是针对hotspot而言，对如何实现方法区，不做统一要求</p><p>现在看来，当年使用永久代，并不是个好方法，导致Java程序更容易OOM</p><p>到了JDK8，放弃了永久代，改用JRockit，j9一样在本地内存中实现元空间</p><ul><li>元空间本质与永久代类似，都是对JVM规范中方法区的实现，不过元空间与永久代最大的区别在于，<code>元空间不在虚拟机设置的内存中，而是使用了本地内存</code></li></ul><h4 id="设置方法区的大小"><a href="#设置方法区的大小" class="headerlink" title="设置方法区的大小"></a>设置方法区的大小</h4><ul><li><p>JDK7以前:</p><ul><li>-XX:PermSize来设置永久代初始分配空间，默认值为20.75M</li><li>-XX:MaxPerSize来设置最大可分配空间。32位机器默认64M，64位机器默认82M。</li></ul></li><li><p>JDK8以后:</p><ul><li>元数据区大小可以使用-XX:MetadpaceSize=xx和-XX:MaxMetaspaceSize=xx替换原有的两个参数，window下初始为21M，最大为-1，没有上限。</li><li>对于JVM来说，将初始值看作一个水平线，一旦触及了此水平线，JVM将会发生FullGC，然后水平线将会被重置，释放的空间不足的话，就会提高该水平线，释放空间过多的话，就会降低该水平线</li><li>所以如果水平线设置过低的话，他的调整情况就会发生很多次，为了避免频繁GC，建议将初始线设置为一个相对较高的值</li></ul><h4 id="一些解决OOM的方法"><a href="#一些解决OOM的方法" class="headerlink" title="一些解决OOM的方法"></a>一些解决OOM的方法</h4><ol><li>要解决OOM异常或heap space异常，一般的手段是首先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏还是内存溢出</li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GC roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GC引用链的信息，就可以比较精准的定位出泄漏代码的位置</li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实还必须存活着，那就应当检查虚拟机的堆参数(-xmx,-xms),与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长，持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol></li></ul><h4 id="方法区内部结构"><a href="#方法区内部结构" class="headerlink" title="方法区内部结构"></a>方法区内部结构</h4><blockquote><p>方法区用于存储已被虚拟机加载的类型信息，常量，静态变量，即时编译器后的代码缓存等</p></blockquote><h5 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h5><p>对每个加载的类型(类class，接口interface，枚举enum，注解annotation)，JVM必须在方法区中存储以下类型信息</p><ol><li>这个类的完整有效名称(全名=包名.类名)</li><li>这个类型直接父类的完整有效名(对于interface或是java.lang.Object,都没有父类)</li><li>这个类型的修饰符(public，abstract，final的某个子类)</li><li>这个类型直接接口的一个有序列表</li></ol><h5 id="方法信息"><a href="#方法信息" class="headerlink" title="方法信息"></a>方法信息</h5><ol><li>方法名称</li><li>方法返回类型</li><li>方法参数的数量和类型</li><li>方法的修饰符(public,private,protected.static,final,synchronized,native,abstract的一个子集)</li><li>（方法的字节码，操作数栈，局部变量表）的大小(abstract和native除外)</li><li>异常表(abstract和native除外)<ol><li>每个异常处理的开始位置，结束位置，代码处理在程序计数器中的偏移地址，被捕获的异常类的常量池索引</li></ol></li></ol><h5 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h5><h6 id="为什么需要常量池"><a href="#为什么需要常量池" class="headerlink" title="为什么需要常量池"></a>为什么需要常量池</h6><p>一个java源文件中的类，接口，编译后产生一个字节码文件，而java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存放到字节码里，换另一种方式，存到常量池，这个字节码包括了指向常量池的引用，在动态链接的时候经常用到运行时常量池。</p><p>常量池可以看作一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量等类型</p><h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><ul><li>运行时常量池是方法区的一部分</li><li>常量池表是class文件的一部分，用于存放编译期生成的各种字面量和引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li><li>运行时常量池在加载类和接口到虚拟机后，就会创建对应的运行时常量池，</li><li>JVM为每个已加载的类型都维护一个常量池，池中的数据项像数组一样，通过索引访问</li></ul><h4 id="方法区使用举例"><a href="#方法区使用举例" class="headerlink" title="方法区使用举例"></a>方法区使用举例</h4><p>详情请看宋红康JVMp96</p><h2 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h2><p>本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序</p><p>为什么要使用本地方法接口</p><ul><li>与java环境外交互     –有时Java应用需要与java外面的环境交互–</li><li>与操作系统交互       –通过使用本地方法，我们得以用Java实现了jre与底层系统的交互，甚至JVM的一部分就是使用C写的，以及我们需要使用一些Java语言本身没有提供封装的操作系统的特性时，我们也需要本地方法 –</li><li>Sun’s Java             –Sun的解释器是用c实现的，这使得它能像一些普通的c一样与外部交汇–</li></ul><h3 id><a href="#" class="headerlink" title></a></h3><p>持续更新….</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制中1的个数</title>
      <link href="/2022/041861258.html"/>
      <url>/2022/041861258.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041861258/1650250600186.png" class title="二进制中1的个数"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最右边一位是不是1</span>            res <span class="token operator">+=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//右移</span>            n <span class="token operator">>>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法3:</p><p>  n &amp;= n - 1; 表示消去数字n最右边的1</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          res<span class="token operator">++</span><span class="token punctuation">;</span>          n <span class="token operator">&amp;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索数的后续遍历序列</title>
      <link href="/2022/041729028.html"/>
      <url>/2022/041729028.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041729028/1650129194192.png" class title="二叉搜索数的后续遍历序列"></em></p><p>解法1:递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> postorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//只有一个节点，是二叉搜索树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//左区间开始</span>        <span class="token comment" spellcheck="true">////0</span>       <span class="token keyword">int</span> pre <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到第一个大于最右边也就是根节点的数,他的左边是左区间，右边是右区间</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> postorder<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">////6</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到右子树区间的最后一个</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> postorder<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//     本树成立           左树成立                      右树成立</span>        <span class="token keyword">return</span> left <span class="token operator">==</span> right <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2:单调栈</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//单调栈    单调递增</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反向遍历数组 [5，6，2，3，1]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                          <span class="token comment" spellcheck="true">//当前元素大于栈顶元素,表明还在右子树</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//一直弹出找到左子树的根节点</span>                pre <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//新元素入栈     比如第一次是根节点，</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值的整数次方</title>
      <link href="/2022/041615437.html"/>
      <url>/2022/041615437.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041615437/1650110856421.png" class title="数值的整数次方"></em></p><p><img src="/2022/1650110856421.png" alt="1650110856421"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//负数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//是需要的数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">*=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x <span class="token operator">*=</span> x<span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建二叉树</title>
      <link href="/2022/041419604.html"/>
      <url>/2022/041419604.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041419604/1649928867555.png" class title="重建二叉树"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>preorder <span class="token operator">=</span> preorder<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将inorder放入map中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">recure</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TreeNode <span class="token function">recure</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span><span class="token keyword">int</span> pre_left<span class="token punctuation">,</span> <span class="token keyword">int</span> pre_right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre_left <span class="token operator">></span> pre_right <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找出根节点</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取根节点在中序遍历中的位置索引</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左递归,根节点也就是现在位置 + 1</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">recure</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>pre_left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右递归</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">recure</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> pre_left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>pre_right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的最近公共祖先</title>
      <link href="/2022/04141838.html"/>
      <url>/2022/04141838.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/04141838/1649918830465.png" class title="二叉树的最近公共祖先"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * }     */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果root为空或者root为pq中的一个,说明root就是pq的最近公共祖先</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null <span class="token operator">||</span> root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//left 为空说明left没有公共祖先，那么返回right</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反之亦然</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的最近公共祖先</title>
      <link href="/2022/041355569.html"/>
      <url>/2022/041355569.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//root的值大于p和q,说明p,q在root的左子树范围内</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果root的值小于p和q,说明pq在root右子树范围内</span>        <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果root的值大于p小于q，那么p在左子树，q在右子树,那么最近公共祖先就是他自己，反之亦然</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求1+2+...+n</title>
      <link href="/2022/041213167.html"/>
      <url>/2022/041213167.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/041213167/1649765708756.png" class title="求1+2+...+n"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sum <span class="token operator">=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树</title>
      <link href="/2022/041229208.html"/>
      <url>/2022/041229208.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041229208/1649762070506.png" class title="平衡二叉树"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Returnty</span> <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> isbal<span class="token punctuation">;</span>      <span class="token keyword">int</span> deep<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Returnty</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isbal<span class="token punctuation">,</span> <span class="token keyword">int</span> deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isbal <span class="token operator">=</span> isbal<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> deep<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Returnty process <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> process<span class="token punctuation">.</span>isbal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> Returnty <span class="token function">process</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Returnty</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Returnty leftData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        Returnty rightData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftData<span class="token punctuation">.</span>deep<span class="token punctuation">,</span>rightData<span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isb <span class="token operator">=</span> leftData<span class="token punctuation">.</span>isbal <span class="token operator">&amp;&amp;</span> rightData<span class="token punctuation">.</span>isbal <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftData<span class="token punctuation">.</span>deep <span class="token operator">-</span> rightData<span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Returnty</span><span class="token punctuation">(</span>isb<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的深度</title>
      <link href="/2022/041217746.html"/>
      <url>/2022/041217746.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/041217746/1649752138110.png" class title="二叉树的深度"></em></p><p>解法1:</p><p>二叉树的深度就等于他左右子树中最深的哪个的深度 + 1</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    * * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据流中的中位数</title>
      <link href="/2022/04111517.html"/>
      <url>/2022/04111517.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/04111517/1649691004553.png" class title="数据流中的中位数"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//小根堆</span>    PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//大根堆</span>    PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> B<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token function">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//该向L添加了，但是不能直接添加，因为不知道这个值是大还是小，</span>    <span class="token comment" spellcheck="true">// 所以我们直接添加到小的里面，然后将小的里面的对顶弹出，放到大的里面，从而保证总是符合规定的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            L<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//同理</span>            B<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            L<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//偶数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> B<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//奇数，直接返回小的堆顶</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.addNum(num); * double param_2 = obj.findMedian(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小的k个数</title>
      <link href="/2022/041050388.html"/>
      <url>/2022/041050388.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/041050388/1649580727580.png" class title="最小的k个数"></em></p><p>方法一:快排选前k个</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//快排实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将数组中的随机位置与最右边的值交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//进行partition来得到等于区的左右边界</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span>  <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左边界递归</span>            <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//右边界递归</span>            <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//交换位置</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义小于等于区和大于等于</span>        <span class="token keyword">int</span> less <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> more <span class="token operator">=</span> R<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前值小于划分值，小于区扩大，自己和自己交换，L++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                less<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>less<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>                L<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果当前值大于划分值,大于区扩大也就是减一个，交换左右，R不变</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                more<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>more<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//当前值等于划分值,直接跳下一个</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                L<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//一次递归完成之后，将划定值与大于区第一个交换</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>R<span class="token punctuation">,</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>less<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>more<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2:快排划分,在快排中如果划分值大于k证明前k个值都在小于区内，如果大于，就在大于区内，如果等于，就直接返回前k个数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> k<span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token function">qs</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">qs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将数组中的随机位置与最右边的值交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进行partition来得到等于区的左右边界</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span>  <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//大于</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//左边界递归</span>                <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>L<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//右边界递归</span>                <span class="token function">qs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                res <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//交换位置</span>     <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义小于等于区和大于等于</span>        <span class="token keyword">int</span> less <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> more <span class="token operator">=</span> R<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前值小于划分值，小于区扩大，自己和自己交换，L++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                less<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>less<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>                L<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果当前值大于划分值,大于区扩大也就是减一个，交换左右，R不变</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                more<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>more<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//当前值等于划分值,直接跳下一个</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                L<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//一次递归完成之后，将划定值与大于区第一个交换</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>R<span class="token punctuation">,</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>less<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>more<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法3:</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扑克牌中的顺子</title>
      <link href="/2022/040933768.html"/>
      <url>/2022/040933768.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/040933768/1649578764377.png" class title="扑克牌中的顺子"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为0可以当任何,所以要想是顺子，在没有除0的重复以外，将数组排序，第一个不是顺子的数和最后一个数，记为m.n，</span>        <span class="token comment" spellcheck="true">// nums[m] - nums[n] &lt; 5 的话，就可以组成顺子，其余的位置都可以由0补上</span>        <span class="token comment" spellcheck="true">//排序</span>        <span class="token comment" spellcheck="true">//定义0的数量</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//0的数量</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不等于0的重复，直接返回false</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span> i <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的第k大节点</title>
      <link href="/2022/040764475.html"/>
      <url>/2022/040764475.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/040764475/1649322531455.png" class title="二叉搜索树的第k大节点"></em></p><p>解法1:<br>二叉树的反向中序遍历</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> res<span class="token punctuation">;</span>     <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树与双向链表</title>
      <link href="/2022/040721310.html"/>
      <url>/2022/040721310.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/040721310/1649319867865.png" class title="二叉搜索树与双向链表"></em></p><p>解法1:因为是二叉搜索树，所以我们使用二叉树的中序遍历</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {    public int val;    public Node left;    public Node right;    public Node() {}    public Node(int _val) {        val = _val;    }    public Node(int _val,Node _left,Node _right) {        val = _val;        left = _left;        right = _right;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   Node pre<span class="token punctuation">;</span>    Node head<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有左节点，就把当前节点给链表的右</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pre<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//没有左节点,就证明当前节点是头节点</span>            head <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//修改指向</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树中和为某一值的路径</title>
      <link href="/2022/040436527.html"/>
      <url>/2022/040436527.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/040436527/1651133934779.png" class title="二叉树中和为某一值的路径"></em></p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    LinkedList<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> target<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等于空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//符合情况,即叶子节点加之前的sum等于target</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> sum <span class="token operator">+</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sum -= root.val;</span>        <span class="token comment" spellcheck="true">//清除list</span>        list<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人的运动范围</title>
      <link href="/2022/040418591.html"/>
      <url>/2022/040418591.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/040418591/1649039370104.png" class title="机器人的运动范围"></em></p><p>解法1：深度优先搜索</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 &lt;= n,m &lt;= 100</span>    <span class="token comment" spellcheck="true">//0 &lt;= k &lt;= 20</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//用来判断某个格子是否被走过</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> istrue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>istrue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当前所在位置，格子长宽,k</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> istrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果符合要求即,不越界,位数相加小于k,没有被访问过,[0,0]是一定符合要求的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> b <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> n             <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> a <span class="token operator">/</span> <span class="token number">10</span>  <span class="token operator">+</span> a <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">+</span> b <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> b <span class="token operator">/</span> <span class="token number">10</span>  <span class="token operator">+</span> b <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k             <span class="token operator">&amp;&amp;</span> istrue<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这个格子已经走过了</span>            istrue<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span>istrue<span class="token punctuation">)</span>                      <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>istrue<span class="token punctuation">)</span>                      <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>istrue<span class="token punctuation">)</span>                     <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>istrue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵中的路径</title>
      <link href="/2022/040318427.html"/>
      <url>/2022/040318427.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/040318427/1648978646634.png" class title="矩阵中的路径"></em></p><p>解法1：dfs(深度优先遍历)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果找到，再返回true</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>chars<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数组，单词，长宽，第几个字母</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果越界或者没找到字母</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">></span> board<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> chars<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到了字母并且是最后一个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到字母但不是最后一个,就让他看他的上下左右，已经走过的让它变成~以防止再次访问，dfs之后要回退，因为在下一次dfs时候还可能再次访问这个格子</span>            <span class="token keyword">char</span> s <span class="token operator">=</span>  board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">;</span>            board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'~'</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> res <span class="token operator">=</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>chars<span class="token punctuation">,</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>chars<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>chars<span class="token punctuation">,</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>chars<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转单词顺序</title>
      <link href="/2022/032917454.html"/>
      <url>/2022/032917454.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/032917454/1648524460167.png" class title="翻转单词顺序"></em></p><p>解法1：快慢指针</p><p>思路：去掉首尾空格之后，快慢指针初始化到尾部，让快指针走直到遇到第一个空格，快慢指针之间就是一个单词，将单词提取出来放入stringbuffer中，快指针继续走，走到下一个不是空格的字符，即下一个单词的末尾，让慢指针指向快指针，快指针继续走，以此类推，最后再次去掉首尾空格返回</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">reverseWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//将字符串开头和结尾的空格删除</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        StringBuffer res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fast<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//添加单词   substring是左闭右开的区间</span>            String word <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fast <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遇到空格时，走到第一个不是空格的字母</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fast<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//让slow走到下一个单词的尾部</span>            slow <span class="token operator">=</span> fast<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String s1 <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为s的两个数字</title>
      <link href="/2022/032832097.html"/>
      <url>/2022/032832097.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/032832097/1648477927344.png" class title="和为s的两个数字"></em></p><p>解法1：首尾指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//小的数和最大的数相加都小于target，舍弃最小数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//大的数大于target，或者大的数加上小的数都大于了target，舍弃</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token operator">||</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                last<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果相等,则直接返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整数组顺序使奇数位于偶数前面</title>
      <link href="/2022/03277691.html"/>
      <url>/2022/03277691.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/03277691/1648386572609.png" class title="调整数组顺序使奇数位于偶数前面"></em></p><p>解法1：首尾指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//left遇到偶数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//left遇到奇数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//right遇到奇数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> b <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//right遇到偶数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2：快慢指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//快指针遇到奇数,快指针与慢指针对应的数字交换,慢指针向前移动一位</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>                slow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//快指针移动一位</span>            fast<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>速度  首尾指针 &gt; 快慢指针</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个链表的第一个公共节点</title>
      <link href="/2022/032638613.html"/>
      <url>/2022/032638613.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p>（并不是值相等就是公共节点）</p><p><em><img src="/2022/032638613/1648298698532.png" class title="两个链表的第一个公共节点"></em></p><p>解法1：双指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode headA<span class="token punctuation">,</span> ListNode headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义两个指针，a，b   a先遍历headA再遍历headB，b先遍历B,在遍历A，两者如果有公共点，那么两个指针就会在那个公共点相交</span>        ListNode a <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode b <span class="token operator">=</span>headB<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> a <span class="token operator">!=</span> b <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里为什么要用a == null而不用 a.next == null 呢，因为，如果是两个没有相交结点的情况下</span>            <span class="token comment" spellcheck="true">//他们会一直在headA和headB中转，而不会跳出循环，如果用.next的话，他们会有都等于null的时候，这个时候就跳出循环并且返回的是null</span>            a <span class="token operator">=</span> a <span class="token operator">==</span> null <span class="token operator">?</span> headB <span class="token operator">:</span> a<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            b <span class="token operator">=</span> b <span class="token operator">==</span> null <span class="token operator">?</span> headA <span class="token operator">:</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个排序的链表</title>
      <link href="/2022/032414528.html"/>
      <url>/2022/032414528.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/032414528/1648092388665.png" class title="合并两个排序的链表"></em></p><p>解法1：双指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化一个头节点</span>        ListNode aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让res指向头节点</span>        ListNode res <span class="token operator">=</span> aa<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">==</span> l2<span class="token punctuation">.</span>val <span class="token operator">||</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//a和b的值相等或者a&lt;b时,添加a，a走一步</span>                res<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//添加b，b走一步</span>                res<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//res向前走一步</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//说明a或者b有一个为空了，那么将不为空的部分添加到res之后</span>        res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">?</span> l1<span class="token operator">:</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为res头节点为0，所以我们返回他的下一个节点</span>        <span class="token keyword">return</span> aa<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2：递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val <span class="token operator">></span> l1<span class="token punctuation">.</span>val <span class="token operator">||</span> l2<span class="token punctuation">.</span>val <span class="token operator">==</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中倒数第k个节点</title>
      <link href="/2022/03228935.html"/>
      <url>/2022/03228935.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/03228935/1647954114619.png" class title="链表中倒数第k个节点"></em></p><p>解法1：双指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ListNode pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让快指针走k步，这个时候快指针距离慢指针k步</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//两个一起走直到快指针走到最后一个</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表的节点</title>
      <link href="/2022/032235134.html"/>
      <url>/2022/032235134.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/032235134/1647943741900.png" class title="删除链表的节点"></em></p><p>解法1：双指针</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>           ListNode pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//证明找到了要删除的节点</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2: 单指针，和双指针大同小异</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//证明找到了要删除的节点</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法3：递归</p><p>例如 输入 [4519] 1</p><p>​        当碰到1的时候，是1作为head的时候，1将他的next给head，就相当于跳过了1，然后作为head的5的next就是9，作为head的4的next就是5</p><p>最后输出的就是[459]    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>              head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长不包含重复字符的子字符串</title>
      <link href="/2022/030845208.html"/>
      <url>/2022/030845208.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/030845208/1646701415304.png" class title="最长不包含重复字符的子字符串"></em></p><p>解法1</p><p>思路：使用双端队列</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//双端队列</span>        Deque<span class="token operator">&lt;</span>Character<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//队列里面已经有这个字符了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//记录当前队列的长度</span>                t <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    max <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果双端队列最前方不等于c，就删除最前方</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//再删除掉等于c的这个</span>                deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将c添加进去</span>                deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//队列里面没有这个字符,直接添加</span>                deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2：动态规划+哈希表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用哈希表维护字符最后一次出现的位置</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前长度</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//找到j左边最近的与j位置字母相等的字母</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//找到的话就将这个字母置于j位置，没找到的话j位置置为-1</span>            dic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果tmp &lt; j - i，就证明，没有遇到相同的字母，长度+1</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//否则就是遇到了相等的字母，则左边界就应该由i来决定</span>                tmp <span class="token operator">=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把数字翻译成字符串</title>
      <link href="/2022/030160122.html"/>
      <url>/2022/030160122.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/030160122/1646127928461.png" class title="把数字翻译成字符串"></em></p><p>思路：与青蛙跳台阶那题类似</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String s <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取出两位</span>            String tem <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//tem大于10返回1，小于返回-1等于返回0</span>            <span class="token comment" spellcheck="true">//如果tem在10和25之间，说明可以被翻译，比如01和26就不可以被翻译，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tem<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tem<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"25"</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果大于25或者小于10的话的话，就只有一个一个翻译这种方法</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/2022/022843376.html"/>
      <url>/2022/022843376.html</url>
      
        <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>类型：结构型</p><p>场景： 在软件系统中，某些类型由于自身的逻辑，它具有两个或多个维度的变化 </p><p>例如，我们有多种类型的手机，例如翻盖，平滑，等等，每种手机有多种品牌，如小米华为等，手机又有多种动作，如开机，关机等等。现在我们需要实现它。</p><p>​        我们传统的想法是，创建一个手机抽象类，创建翻盖平滑等的抽象类去继承他，在创建小米华为等类去继承翻盖平滑等等，这样虽然可以实现，但是如果我们需要加一个品牌或者加一种类型的手机，就需要增加大量的类和代码。非常麻烦，所以我们就引入了桥接模式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/28/22:52 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bridge_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//品牌接口</span><span class="token keyword">interface</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小米</span><span class="token keyword">class</span> <span class="token class-name">XiaoMi</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Vivo</span><span class="token keyword">class</span> <span class="token class-name">Vivo</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vivo开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vivo关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vivo打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//组合品牌</span>    <span class="token keyword">private</span> Brand brand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Phone</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FoldedPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FoldedPhone</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取折叠式手机，</span>        Phone phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FoldedPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XiaoMi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">小米开机折叠手机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果我们需要加一个手机品牌的话只需要加一个类去实现品牌接口，这样聚合了品牌接口的抽象类Phone就会接收到这个手机品牌，也就是所有的手机类型中都会加入这个品牌。需要添加类型也是同理。</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>礼物的最大价值</title>
      <link href="/2022/022847390.html"/>
      <url>/2022/022847390.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022847390/1646052748962.png" class title="礼物的最大价值"></em></p><p>解法·1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> column <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dp[i][j]表示从grid[0][0]到grid[i - 1][j - 1]时的最大价值</span>        <span class="token comment" spellcheck="true">//这里多加一行一列就不需要考虑边界值了，</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>column <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> column<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//dp[i][j]就是他上边和他左边的最大值加上grid数组中这个数的值</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续子数组的最大和</title>
      <link href="/2022/022722537.html"/>
      <url>/2022/022722537.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022722537/1645954466547.png" class title="连续子数组的最大和"></em></p><p>解法1：动态规划</p><p>​    思路：，前i个数字的和如果小于零，那么说明第i+1个数如果加上前i个数就会变得更小，那么前i+1个数字和的最大就是nums[i+1]</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最大值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以第i - 1个数为结尾的连续子数组的最大值</span>        <span class="token keyword">int</span> former <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以第i个数为结尾的连续子数组的最大值</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            cur <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>former<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> cur <span class="token operator">+=</span>former<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">></span>max<span class="token punctuation">)</span> max <span class="token operator">=</span> cur<span class="token punctuation">;</span>            former<span class="token operator">=</span>cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2022/022658639.html"/>
      <url>/2022/022658639.html</url>
      
        <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>类型:行为型</p><p>场景： 一个系统有许多许多类，而区分它们的只是他们直接的行为。 </p><p>例如一个需求是我们有各种各样的鸭子，什么野鸭,北京鸭等等，鸭子有各种行为，比如，叫，飞等等，我们需要显示鸭子的信息</p><p>我们会这样做</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/26/22:53 * @Description: */</span><span class="token comment" spellcheck="true">//策略模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Strategy_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸭子抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//叫</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//游泳</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//飞行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//野鸭</span><span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"野鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//北京鸭</span><span class="token keyword">class</span> <span class="token class-name">BeiJingduck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//北京鸭不能飞翔，需要重写fly</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭不能飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//玩具鸭</span><span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面的北京烤鸭和玩具鸭违反了里氏替换原则：尽量不要重写父类方法</p><p>我们不希望重写所有的方法，但是我们希望他们之间又要存在关系</p><p>就引入了策略模式</p><p>假如我们认为所有的鸭子都会游泳和叫，但不是所有的鸭子都会飞，所以我们就有了几种策略，不同的鸭子种类使用不同的策略</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/26/22:53 * @Description: */</span><span class="token comment" spellcheck="true">//策略模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Strategy_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//飞翔策略接口</span><span class="token keyword">interface</span> <span class="token class-name">FlyBahavior</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类具体实现</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//擅长飞翔的策略</span><span class="token keyword">class</span> <span class="token class-name">GoodFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBahavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"擅长飞行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BadFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBahavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不擅长飞行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NoFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBahavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不会飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//鸭子抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//策略接口</span>    FlyBahavior flyBahavior<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//叫</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//游泳</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//飞行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> flyBahavior <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>            flyBahavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//我们可以动态改变飞行策略</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlyBahavior</span><span class="token punctuation">(</span>FlyBahavior flyBahavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flyBahavior <span class="token operator">=</span> flyBahavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//野鸭</span><span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器，传入FlyBehavior对象</span>    <span class="token keyword">public</span> <span class="token function">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       flyBahavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"野鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//北京鸭</span><span class="token keyword">class</span> <span class="token class-name">BeiJingduck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BeiJingduck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flyBahavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//玩具鸭</span><span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flyBahavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Duck wildDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wildDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duck toyDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toyDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duck beijingduck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeiJingduck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beijingduck<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beijingduck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//我们现在又认为北京鸭不会飞</span>        beijingduck<span class="token punctuation">.</span><span class="token function">setFlyBahavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beijingduck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出：</p><pre class="line-numbers language-java"><code class="language-java">野鸭擅长飞行<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>这是玩具鸭不会飞翔<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>北京鸭不擅长飞行<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>不会飞翔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：避免使用多重条件判断，扩展性良好</p><p>缺点：类会增多。</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票的最大利润</title>
      <link href="/2022/022659004.html"/>
      <url>/2022/022659004.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022659004/1645847289599.png" class title="股票的最大利润"></em></p><p>解法1：遍历(动态规划)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最低点</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最大利润</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>               min <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>               max <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青蛙跳台阶问题</title>
      <link href="/2022/022560781.html"/>
      <url>/2022/022560781.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022560781/1645771059022.png" class title="青蛙跳台阶问题"></em></p><p>思路，青蛙跳1阶台阶有一种方法 跳两阶台阶有两种，跳三阶台阶的话，最后一次跳跃有两种方法，如果最后一次跳一节的话 就代表前面跳了两节，两节有2种方法，反之一种，那么两者加起来就是跳三阶台阶的方法个数，以次扩展到n阶；</p><p>​        f(1) = 1</p><p>​        f(2) = 2</p><p>​        f(3) = 3</p><p>​        f(n) = f(n-1) + f(n-2)</p><p>我们可以看出，这归纳出来的方程其实就是斐波那契数列，只不过初始值不一样而已</p><p>​        可以参考  <a href="http://suizuoa.top/2022/022351227.html">斐波那契数列 | 过客 (suizuoa.top)</a> </p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>            b <span class="token operator">%=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然我们也可以使用矩阵快速幂加速</p><p>=====================================================</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2022/022442855.html"/>
      <url>/2022/022442855.html</url>
      
        <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>类型：行为型</p><p>场景： 有一些通用的方法，不需要再每个子类中重写</p><p>比如我们想打steam中的游戏，需要做的步骤有以下：1.打开steam 2.开始游戏 3.玩游戏4结束游戏5.关闭steam</p><p>其中第一步和第五步是固定的，而234，不同的游戏都不一样。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/24/12:42 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Template_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//游戏抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打开steam</span>    <span class="token keyword">void</span> <span class="token function">openSteam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开steam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭steam</span>    <span class="token keyword">void</span> <span class="token function">closeSteam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭steam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打开游戏</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">openGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//玩游戏</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关闭游戏</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">closeGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模板方法,防止被重写我们设置为final</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">openSteam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">openGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeSteam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//以撒的结合</span><span class="token keyword">class</span> <span class="token class-name">Isaac</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">openGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了以撒的结合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩以撒的结合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">closeGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭以撒的结合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//死亡细胞</span><span class="token keyword">class</span> <span class="token class-name">Dead_Cells</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">openGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了死亡细胞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩死亡细胞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">closeGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭死亡细胞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Game isaac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Isaac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isaac<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Game dead_cells <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dead_Cells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dead_cells<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">打开steam打开了以撒的结合玩以撒的结合关闭以撒的结合关闭steam<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>打开steam打开了死亡细胞玩死亡细胞关闭死亡细胞关闭steam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2022/022351227.html"/>
      <url>/2022/022351227.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022351227/1645629585326.png" class title="斐波那契数列"></em></p><p>解法1(不完全行)：</p><p>​    思路：递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 0 1 1 2 3 5 8 13</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归嘛，简单。</p><p>结果，</p><p><em><img src="/2022/022351227/1645629663028.png" class title="超出时间限制"></em></p><p>原因是这个递归的时间复杂度是2^n，有大量的重复计算。在递归次数较大时时间呈指数增长</p><p>====================================================</p><p>解法2：动态规划</p><p>我们可以看到第一种递归的方式是从f(n)依次往下计算的，所以产生了大量的重复，但是当我们自己计算一个斐波那契数列时是从前往后计算的，不会产生重复的计算</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定义a表示前一个斐波那契数，b表示当前斐波那契数</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//循环n-1轮</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//那么下一个斐波那契数就是前一个加上当前</span>            b <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//维持前一个</span>            a <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>            b <span class="token operator">%=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度:O(n)</p><p>===============================================</p><p>解法3：</p><p>矩阵快速幂</p><p>首先我们需要了解什么是快速幂，快速幂顾名思义就是快速计算出一个数的幂，</p><p>例如我们需要计算2^10   直接算的话需要进行11次乘法，但是我们可以将2^11变为(2^2)^5,就只需要7次乘法。</p><p>我们可以将指数写成2进制，例如 2^11   11的二进制为1011     2^11就可以拆分为 </p><pre><code>          2^2^0  ×    2^2^1    ×  2^2^3</code></pre><p> 矩阵快速幂就是将数字换成矩阵。</p><p>现在我们看题，</p><p><em><img src="/2022/022351227/IMG_20220225_152637.jpg" class title="矩阵快速幂"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//工具矩阵</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//快速幂，q^(n-1)</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里最后矩阵的右下角就是我们需要的</span>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//快速幂</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化单位矩阵</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//例如2^11       1011 &amp; 0001   当n&amp;1 = 1 时，这一位就是我们需要用的，</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//矩阵乘法</span>                ret <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//n右移一位</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//右移一位之后，指数也要相乘 </span>            a <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称的二叉树</title>
      <link href="/2022/022360551.html"/>
      <url>/2022/022360551.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/022360551/1645606815075.png" class title="对称的二叉树"></em></p><p>解法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode L<span class="token punctuation">,</span>TreeNode R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//左右都为空，说明对称</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> R <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//左右只有一边为空或者左右的值不相等，说明不对称</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> null <span class="token operator">||</span> R <span class="token operator">==</span> null <span class="token operator">||</span> L<span class="token punctuation">.</span>val <span class="token operator">!=</span> R<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果L和R对称的话，说明L的左子节点和R的右子节点一定相等，L的右子节点和R的左子节点一定相同。</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>left<span class="token punctuation">,</span>R<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>right<span class="token punctuation">,</span>R<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的镜像</title>
      <link href="/2022/022224432.html"/>
      <url>/2022/022224432.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022224432/1645537365225.png" class title="二叉树的镜像"></em></p><p>解法1：递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mirrorTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归跳出条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//暂存left节点，因为在后续递归中left会改变</span>        TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归过程</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>=======================================================================</p><p>解法2：辅助栈</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mirrorTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定义辅助栈  作用是防止因交换而左右不清</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将节点添加进去     [4]</span>        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//弹出一个节点    []</span>            TreeNode node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//[2]</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//[2,7]</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//交换左右</span>            TreeNode tmp <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2022/022233100.html"/>
      <url>/2022/022233100.html</url>
      
        <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>类型：结构型</p><p>场景：需要提供一个统一操作界面给用户使用</p><p>例如一个影院，在工作人员点击停止之后，有如下步骤：关闭播放器，上升屏幕，关灯等等等等。但是工作人员不需要关心内部细节，只需要点击停止即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/22/16:36 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//播放器</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用单例模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Player pla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Player <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pla<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启播放器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭播放器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//屏幕</span><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Screen scr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Screen <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> scr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上升屏幕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下降屏幕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//灯</span><span class="token keyword">class</span> <span class="token class-name">Lamp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Lamp lam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Lamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Lamp <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lam<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开灯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关灯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//外观类</span><span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Player player<span class="token punctuation">;</span>    <span class="token keyword">private</span> Screen screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> Lamp lamp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里的构造器不使用参数，而是获得单例对象</span>    <span class="token keyword">public</span> <span class="token function">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> Player<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lamp <span class="token operator">=</span> Lamp<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//开启</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备放映======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        player<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lamp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始放映======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按下了关闭====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        player<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lamp<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">准备放映<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>开启播放器上升屏幕开灯开始放映<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>按下了关闭<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>关闭播放器下降屏幕关灯结束<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的子结构</title>
      <link href="/2022/022259410.html"/>
      <url>/2022/022259410.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022259410/1645501273401.png" class title="树的子结构"></em></p><p>解法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>TreeNode A<span class="token punctuation">,</span> TreeNode B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">==</span> null <span class="token operator">||</span> A <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果A等于B 左边包含并且右边包含的时候，证明B是A的子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>val <span class="token operator">==</span> B<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>left<span class="token punctuation">,</span>B<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">helper</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>right<span class="token punctuation">,</span>B<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//目的找到A.val == B.val</span>        <span class="token keyword">return</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>left<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>right<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode root1<span class="token punctuation">,</span>TreeNode root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果B被遍历完了，就证明B是A的子结构</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果A被遍历完了，就证明A里面肯定没有B</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果A的值等于B的值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>val <span class="token operator">==</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//看以root1.left为根节点的树是否包含以root2.left为根节点的树，右同理</span>            <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">helper</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2022/022148003.html"/>
      <url>/2022/022148003.html</url>
      
        <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>定义: 一个类代表另一个类的功能 </p><p>类型：结构型</p><p>场景：访问一个类时需要额外操作的时候，例如spring aop</p><p>代理模式分为<code>静态代理</code>和<code>动态代理</code></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>现在班级需要收取班费，班费交给班长,由班长交给班主任，我们让班长代理学生。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/21/10:39 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy_pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//交班费方法</span>    <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学生类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"上交了班费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//班长类 也就是代理类，代理学生完成上交班费</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//包含被代理类</span>    Student student<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Monitor</span><span class="token punctuation">(</span>Person stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断代理的是不是学生</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> stu<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用学生交班费方法</span>        student<span class="token punctuation">.</span><span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"学生1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span><span class="token punctuation">;</span>        monitor<span class="token punctuation">.</span><span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">学生<span class="token number">1</span>上交了班费<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们刚刚说，访问一个类要进行额外操作，就可以直接在代理类中添加</p><p>我们修改代理类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//班长类 也就是代理类，代理学生完成上交班费</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//包含被代理类</span>    Student student<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Monitor</span><span class="token punctuation">(</span>Person stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断代理的是不是学生</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> stu<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//交班费之前做了一些事情</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomeThing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用学生交班费方法</span>        student<span class="token punctuation">.</span><span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再进行测试</p><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">doSomeThing学生<span class="token number">1</span>上交了班费<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在我们除了交班费，还要有其他的方法，如果我们需要在所有方法之前统计一下班级的人数，或者做一些方法，我们就要在每个代理方法中处理。这在代理方法很多时会非常麻烦，所以我们引入了动态代理</p><h3 id="动态代理-JDK代理模式"><a href="#动态代理-JDK代理模式" class="headerlink" title="动态代理(JDK代理模式)"></a>动态代理(JDK代理模式)</h3><p>动态代理顾名思义就是在我们运行时决定代理对象</p><p>动态代理又分为jdk代理和cglib代理。这里我们使用了jdk自带的类库，所以又叫jdk代理</p><p>动态代理其实就是在代理类的外部加了一层，每个代理方法都被一个固定方法代替。</p><p>实现动态代理需要 <strong>Proxy类和InvocationHandler接口</strong>  这个类可以理解成新加的那一层</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/21/10:39 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy_pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//交班费方法</span>    <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开会方法</span>    <span class="token keyword">void</span> <span class="token function">metting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学生类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"上交了班费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">metting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"到会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建代理对象的类，需要实现InvocationHandler接口，被代理的对象是target,所有的代理方法都会被替换成invoke方法</span><span class="token keyword">class</span> <span class="token class-name">StuInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被代理对象</span>    Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StuInvocationHandler</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//生成代理对象的方法</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//CalssLoader :指定当前目标对象使用的类加载器，固定</span>        <span class="token comment" spellcheck="true">//Class&lt;?>[] interfaces,目标对象实现的接口类型，使用泛型确认</span>        <span class="token comment" spellcheck="true">//InvocationHandler 执行目标对象方法时，会把当前执行的目标对象作为参数</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token keyword">this</span>                                <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"统计人数方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"学生1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Handler                             创建代理对象   可以强转就代表代理类也实现了person接口</span>        Person personproxy <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">StuInvocationHandler</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personproxy<span class="token punctuation">.</span><span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personproxy<span class="token punctuation">.</span><span class="token function">metting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出:</p><pre class="line-numbers language-java"><code class="language-java">统计人数方法学生<span class="token number">1</span>上交了班费    统计人数方法学生<span class="token number">1</span>到会<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要添加方法只需要在person类中添加相应接口，学生类实现即可。</p><p>我们可以看出，无论是静态代理还是上面的动态代理，被代理的对象都是接口，但有的时候被代理的对象只是一个对象，没有任何接口，这个时候就可以使用目标对象子类实现代理，也就是Cglib代理</p><h3 id="动态代理-Cglib代理模式"><a href="#动态代理-Cglib代理模式" class="headerlink" title="动态代理(Cglib代理模式)"></a>动态代理(Cglib代理模式)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/21/23:09 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy_Patern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//必须要有无参构造，否则会出现Superclass has no null constructors but no arguments were given异常</span>    <span class="token comment" spellcheck="true">//是因为cglib代理是通过创建子类继承父类，而子类会调用父类的无参构造，如果没有，就会抛异常</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"交了班费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">metting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"到会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被代理对象</span>     <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取代理对象</span>    <span class="token keyword">public</span> Person <span class="token function">getCglibProxy</span><span class="token punctuation">(</span>Object targetObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为目标对象target赋值，</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> targetObject<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定父类</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置回调函数,就是他自己</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建代理对象</span>        Object res <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//执行代理方法</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清点人数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"per1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化cglibProxy</span>        CglibProxy cglibProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建代理对象</span>        Person personProxy <span class="token operator">=</span> cglibProxy<span class="token punctuation">.</span><span class="token function">getCglibProxy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                personProxy<span class="token punctuation">.</span><span class="token function">giveMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personProxy<span class="token punctuation">.</span><span class="token function">metting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">清点人数per1交了班费清点人数per1到会<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>CGLIB</strong>是针对类实现代理，主要是<strong>对指定的类生成一个子类，覆盖其中的方法 ，使用asm字节码框架实现，相关执行的过程比较高效，生成类的过程可以利用缓存弥补（不太懂），因为是继承，所以该类或方法最好不要声明成final</strong> </li></ul><p>本文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树Ⅲ</title>
      <link href="/2022/022033004.html"/>
      <url>/2022/022033004.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/022033004/1645348570425.png" class title="从上到下打印二叉树Ⅲ"></em></p><p>思路：在 上一题<a href="http://suizuoa.top/2022/021933196.html">从上到下打印二叉树Ⅱ | 过客 (suizuoa.top)</a> 的基础上，按照之字形输出，我们使用双向队列，即可以在头部和尾部插入，当层数为奇数的时候，我们从队首弹出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     tmp<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                     tmp<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2：</p><p>在正常打印完之后判断层数，如果是偶数层，那么tmp执行倒序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐方法1</p><p>此文仅作为本人学习笔记使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树Ⅱ</title>
      <link href="/2022/021933196.html"/>
      <url>/2022/021933196.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/021933196/1645283263049.png" class title="从上到下打印二叉树Ⅱ"></em></p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义临时列表储存</span>             List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//通过queue.size()可以正好把当前层遍历完成</span>            <span class="token comment" spellcheck="true">//因为如果写成for(int i = 0; i &lt; queue.size();i++)的话，queue.size()会随着循环变化，导致出错</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//将临时列表添加到结果列表中</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法二：递归</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//我们需要节点和深度</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果没有节点了，我们就跳出递归</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//因为res是一个二维列表，我们需要每一层都有一个列表来存放数据，res.size就是现在有多少个存放数据的列表，depth是层数，</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为这一层新建一个列表用来保存数据</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将这个节点添加进去</span>        res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加左节点和右节点,层数+1</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树</title>
      <link href="/2022/021938604.html"/>
      <url>/2022/021938604.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/021938604/1645259587961.png" class title="从上到下打印二叉树"></em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//特例处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化队列和列表，队列进行操作，列表存储节点</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当队列不为空时</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//弹出一个</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加到list中</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//列表加到数组里面</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/2022/021864336.html"/>
      <url>/2022/021864336.html</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>定义： 装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。 </p><p>类型：结构型</p><p>场景： 动态地给一个对象添加一些额外的职责。就增加功能来说，如果需要新增职责太多，就会出现一系列排列组合，想要全部以子类的形式来写是非常麻烦而且容易出错的。装饰器模式相比生成子类更为灵活 ，可以用来代替继承。</p><p>需求：装修房屋，有基本功能和附加功能，基本功能是必须的，而附加功能则是可选的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/18/17:04 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//基本类型接口</span><span class="token keyword">interface</span> <span class="token class-name">IDecorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//装修方法</span>    <span class="token keyword">void</span> <span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//基本类,实现必要方法</span><span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">IDecorator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"装修房屋必要方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//基本装饰类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">IDecorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//包含基本类</span>    <span class="token keyword">private</span> IDecorator decorator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaseDecorator</span><span class="token punctuation">(</span>IDecorator decorator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>decorator <span class="token operator">=</span> decorator<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>decorator <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            decorator<span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//现在我们需要添加一个新功能</span><span class="token keyword">class</span> <span class="token class-name">NewDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDecorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//必须重载父类构造器，也就是有了基本装修方法</span>    <span class="token keyword">public</span> <span class="token function">NewDecorator</span><span class="token punctuation">(</span>IDecorator decorator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>decorator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//现在我们需要再添加一个新功能</span><span class="token keyword">class</span> <span class="token class-name">NewDecorator1</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDecorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//必须继承父类构造器，也就是有了基本装修方法</span>    <span class="token keyword">public</span> <span class="token function">NewDecorator1</span><span class="token punctuation">(</span>IDecorator decorator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>decorator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增功能1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试    我现在需要先有基本功能，然后有新增功能1的房子，有新增功能2的房子</span><span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IDecorator house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基本房子</span>        house<span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新增功能的房子</span>        house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDecorator</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新增功能1的房子</span>        house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDecorator1</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//有一个新房子，只需要功能1，</span>        IDecorator house1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        house1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewDecorator1</span><span class="token punctuation">(</span>house1<span class="token punctuation">)</span><span class="token punctuation">;</span>        house1<span class="token punctuation">.</span><span class="token function">Dodecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">装修房屋必要方法<span class="token operator">==</span><span class="token operator">=</span>新增功能装修房屋必要方法<span class="token operator">==</span><span class="token operator">=</span>新增功能<span class="token number">1</span>新增功能装修房屋必要方法<span class="token operator">==</span><span class="token operator">=</span>新增功能<span class="token number">1</span>装修房屋必要方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个只出现一次的字符</title>
      <link href="/2022/021834594.html"/>
      <url>/2022/021834594.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/021834594/1645159369148.png" class title="第一个只出现一次的字符"></em></p><p>解法1：</p><p>哈希表</p><p>思路：遍历字符串，将其放入哈希表，key为这个字母，value为是否重复，如果有重复的进来，就将value置为false，然后遍历一遍字符串(不可以遍历哈希表，因为哈希表是无序的)，找到第一个等于true的即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Boolean<span class="token operator">></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sc <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果遇到重复，就会将重复值的value变为false</span>            dic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">!</span>dic<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在字典中查找第一个等于true的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//否则就是没有不重复的数字</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ps:</code>第二个遍历我们不可以遍历哈希表，但是我们可以遍历有序哈希表如 LinkedHashMap ，所以我们可以使用 LinkedHashMap 代替HashMap,在数据量比较大的情况下效率更高。也可以使用数组，定义一个长度为26的数组，将给定字符串统计到数组，数组的值改变，类似于HashMap</p><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组的最小值</title>
      <link href="/2022/021760340.html"/>
      <url>/2022/021760340.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/021760340/1645087821760.png" class title="旋转数组的最小数字"></em></p><p>虽然不是整体升序，但是我们可以把它看成两个升序的,也可以用二分</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果中间值大于右值，说明是递增的，舍弃前半部分</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果中间值小于左侧，那么他之后肯定不是最小值，舍弃他右边</span>                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果中间值等于左侧,我们无法判断是否是最小，所以我们将right-1来缩小范围</span>                   right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ps:</code>不可以用numbers[mid]和 numbers[left]进行比较，因为不能确定left是否属于第一个递增的数组，比如12345，没有偏转或者说偏转值为0.这个时候left是属于第二个递增的数组的。所以不能比较。而right一定是属于第二个数组的。所以我们用numbers[mid]和 numbers[left]进行比较。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="/2022/021745951.html"/>
      <url>/2022/021745951.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/021745951/1645073541593.png" class title="二维数组中的查找"></em></p><p>解法：</p><p>思路：我们以题目中的矩阵为例，左上和右下两个角分别是最小和最大。我们如果以他们为起点，就不好判断指针该往哪边走，但是左下角他所在的列是依次递减，行却是依次递增。右上角同理。所以我们可以从这两个角出发，比如我们从左下角出发，记为flag如果target&gt;flag，那么flag这一列肯定都比flag要小，我们就舍弃这一列，小于也是同理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最后一行</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一列</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这一行舍弃</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这一列舍弃</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//数组中没有查到该数</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：在二维数组中matrix.length为行数，matrix[0].length为列数</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2022/021639554.html"/>
      <url>/2022/021639554.html</url>
      
        <content type="html"><![CDATA[<h2 id="适配器模式-也叫Wrapper-包装器"><a href="#适配器模式-也叫Wrapper-包装器" class="headerlink" title="适配器模式(也叫Wrapper 包装器)"></a>适配器模式(也叫Wrapper 包装器)</h2><p>定义： 将一个接口转换为客户端所期待的接口，从而使两个接口不兼容的类可以在一起工作 </p><p>分为类适配器,方法适配器,接口适配器</p><p>类型： 结构型 </p><p>场景：我们需要使用已经存在的类，但是它提供的接口与我们的不兼容并且我们不可以修改时。</p><p>适配器模式需要三个角色，分别是目标，被适配者，适配器。就和手机充电中5v电压，220v电压和充电器一样</p><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><p>这里我们实现一个将220v转为5v的适配器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/16/21:15 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电压适配器</span><span class="token comment" spellcheck="true">//继承给定的类并且实现我们需要的接口</span><span class="token keyword">class</span> <span class="token class-name">VAdpter</span> <span class="token keyword">extends</span> <span class="token class-name">V220</span> <span class="token keyword">implements</span> <span class="token class-name">V5</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">outPut5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">outPut220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压为"</span><span class="token operator">+</span>v<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压转换完毕，现在为"</span><span class="token operator">+</span>v<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//220v电压</span><span class="token keyword">class</span> <span class="token class-name">V220</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">outPut220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//5v电压接口</span><span class="token keyword">interface</span> <span class="token class-name">V5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">outPut5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用适配接口的对象</span><span class="token keyword">class</span> <span class="token class-name">MyPhone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span>V5 v5<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v5<span class="token punctuation">.</span><span class="token function">outPut5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"充电ing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压不匹配，充电失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VAdpter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">电压为<span class="token number">220</span>伏转换中电压转换完毕，现在为<span class="token number">5</span>伏充电ing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：不灵活，如果我现在又给了一个300v的类，因为java是单继承模式，就不好实现。另外在适配器中会暴露被适配者的方法；</p><p>​    所以就引出了对象适配器</p><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><p>与类适配器的区别为变继承为组合，在适配器类中组合要适配的电压</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/16/21:15 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电压适配器</span><span class="token keyword">class</span> <span class="token class-name">VAdpter</span>  <span class="token keyword">implements</span> <span class="token class-name">V5</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Adapyee adapyee<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">outPut5v</span><span class="token punctuation">(</span>Adapyee adapyee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> adapyee<span class="token punctuation">.</span><span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压为"</span><span class="token operator">+</span>v<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压转换完毕，现在为"</span><span class="token operator">+</span>v<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//220v电压</span><span class="token keyword">class</span> <span class="token class-name">V220</span> <span class="token keyword">extends</span> <span class="token class-name">Adapyee</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//300v电压</span><span class="token keyword">class</span> <span class="token class-name">V300</span> <span class="token keyword">extends</span> <span class="token class-name">Adapyee</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输入电压抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Adapyee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//5v电压接口</span><span class="token keyword">interface</span> <span class="token class-name">V5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">outPut5v</span><span class="token punctuation">(</span>Adapyee adapyee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用适配接口的对象</span><span class="token keyword">class</span> <span class="token class-name">MyPhone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span>V5 v5<span class="token punctuation">)</span><span class="token punctuation">{</span>        Adapyee adapyee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">V300</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v5<span class="token punctuation">.</span><span class="token function">outPut5v</span><span class="token punctuation">(</span>adapyee<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"充电ing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压不匹配，充电失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VAdpter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">电压为<span class="token number">300</span>伏转换中电压转换完毕，现在为<span class="token number">5</span>伏充电ing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要添加一个新的输入电压，只需要添加一个新类继承抽象输入电压类，然后实例化使用即可</p><h3 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h3><p>java规定接口的实现类必须实现接口的所有方法,但是抽象类中可以在方法体中什么都不写，所以我们可以让一个抽象类实现这个接口，我们可以在抽象类中选择性的实现方法，也可以在调用的时候重写方法。就可以实现选择性地实现接口中的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/16/22:45 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IAdapter_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MyAdptar</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyInterface myAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAdptar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        myAdapter<span class="token punctuation">.</span><span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myAdapter<span class="token punctuation">.</span><span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">这是方法<span class="token number">2</span>这是方法<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0~n-1中缺失的数字</title>
      <link href="/2022/021623784.html"/>
      <url>/2022/021623784.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/021623784/1644995985311.png" class title="0~n-1中缺失的数字"></em></p><p>解法1：</p><p>思路，如果没有缺失数字的数组之和减去确实了数字的数组之和就是缺少的数字</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//原本数组的总和应该为这样</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//原本数组之和减去现在数组之和就是缺失的数字</span>        <span class="token keyword">return</span> sum <span class="token operator">-</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>===================================</p><p>解法二：(推荐)</p><p>题目给定的条件是递增排序数组，所以我们可以用二分法提高效率</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果中间值等于mid，说明缺失的数字在后半部分</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果中间值不等于mid，说明缺失的数字在前半部分</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在排序数组中查找数字Ⅰ</title>
      <link href="/2022/021565332.html"/>
      <url>/2022/021565332.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/021565332/1644915492070.png" class title="在排序数组中查找数字Ⅰ"></em></p><p>解法1：</p><p>思路：遍历，如果遇上等于target的数字计数器加一，最后返回计数器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>===================================================</p><p>解法2：(推荐)</p><p>思路：题目给定的条件是排序后的数组，我们就可以用二分法来解决</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">foundFirst</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">foundLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">foundFirst</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//中间值小于target,前半部分不可能为target第一次出现的位置,我们就让left = mid</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//中间值大于等于target，后半部分不可能为target第一次出现位置</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//target没有出现在目标数组</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">foundLast</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将mid赋值给left的时候要向上取整，不然left可能永远小于right，也就永远跳不出循环</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//中间值小于等于target,前半部分(不包括mid)不可能为target最后一次出现的位置,我们就让left = mid</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                left <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//中间值大于target 后半部分不可能为target最后一次出现的位置，我们让right = mid-1；</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2022/021422548.html"/>
      <url>/2022/021422548.html</url>
      
        <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>场景：克隆十个多利🐏</p><p>我们一般会这样做</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/14/10:45 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prototype_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//母体</span>        Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"多利"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//克隆</span>        Sheep sheep1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep1<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">381259350</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1896277646</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1702297201</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1996181658</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出，如果突然要增加一个字段，要改动的代码是非常多的，并且每次克隆都需要获取母体的属性，如果母体复杂的话效率就会很低。我们引入了原型模式</p><h3 id="原型模式-1"><a href="#原型模式-1" class="headerlink" title="原型模式"></a>原型模式</h3><p>类型：创建型</p><p> 原型模式又可分为浅拷贝和深拷贝，区别在于对引用数据类型的成员变量的拷贝 </p><p><code>**浅拷贝**（Shallow Copy）：①对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据。②对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</code></p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>这里我们使用javalang包下的克隆方法，也可以自己定义克隆方法，</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/14/10:45 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prototype_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//克隆方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sheep sheep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sheep <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sheep<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//母体</span>        Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"多利"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//克隆</span>        Sheep sheep1 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep2 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep3 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep1<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">381259350</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1896277646</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1702297201</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们也拷贝了几头🐏</p><p>now 多利有一个朋友，牛，我们用以上的方法也拷贝一遍</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/14/10:45 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prototype_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cow</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cow</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Cow{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> Cow friend<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//克隆方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sheep sheep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sheep <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sheep<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//母体</span>        Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"多利"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheep<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cow</span><span class="token punctuation">(</span><span class="token string">"派大星"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//克隆</span>        Sheep sheep1 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep2 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep3 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep4 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep1<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep1<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep1<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep2<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep3<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep4<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2129789493</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1702297201</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1996181658</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">806353501</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">521645586</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2128227771</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，这几个克隆体的朋友都是同一头。这样显然不行。</p><p>这就是浅拷贝</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>有这一种解法，可以在cow类中实现克隆，然后在sheep类的克隆中调用cow的克隆；可以实现，但是如果cow还有一个朋友，那么就需要继续写下去，非常麻烦，这里推荐通过对象序列化实现深拷贝 </p><p>深拷贝我们使用对象流的形式</p><p>注意两个类都需要实现序列化接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/14/10:45 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prototype_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cow</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cow</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Cow{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> Cow friend<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这个方法我们进行深克隆</span>        <span class="token comment" spellcheck="true">//ByteArrayOutputStream和ByteArrayInputStream相当于缓冲层，不进入文件，先将对象暂时放入缓冲层中</span>        ByteArrayOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//序列化</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//反序列化                      //转换为字节流</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            Sheep sheep <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sheep<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//母体</span>        Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"多利"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheep<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cow</span><span class="token punctuation">(</span><span class="token string">"派大星"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//克隆</span>        Sheep sheep1 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep2 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep3 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep4 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep1<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep1<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep1<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep2<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep3<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token punctuation">.</span>friend<span class="token operator">+</span><span class="token string">",hash:"</span><span class="token operator">+</span>sheep4<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出：</p><pre class="line-numbers language-java"><code class="language-java">Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">492228202</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">401625763</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1161082381</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1067938912</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1637506559</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">517380410</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2117255219</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">2058534881</span>Sheep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'多利'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1232367853</span>Cow<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'派大星'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hash<span class="token operator">:</span><span class="token number">1673605040</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，每个cow对象并不相同</p><p>如果没有引用类型的话用浅拷贝即可</p><p><code>ps:</code>利用序列化也可以破坏单例模式，因为反序列化读取后的对象与前一个不同，但是底层也是通过反射调用的单例的无参构造</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中重复的数字</title>
      <link href="/2022/021338278.html"/>
      <url>/2022/021338278.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/021338278/1644742246035.png" class title="数组中重复的数字"></em></p><p>解法1：</p><p>思路：用一个集合存储遇到的数字，如果遇到一个数字已经在集合中，这个数字就是重复数字</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rep <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Set.add() 方法用来向 Set 集合添加对象。如果 Set 集合中已经包含相同的对象，则不改变 Set 集合。</span><span class="token comment" spellcheck="true">//该方法返回值为 boolean 对象，如果 Set 集合中不包含要添加的对象，则添加对象并返回true，否则返回false。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                rep <span class="token operator">=</span> num<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rep<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>=========================================================</p><p>解法2(推荐)</p><p>思路</p><p> 题目中说在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内，这说明，如果数组num中没有重复数字，那么数组中的索引和值是对应的关系，即：第一个数字是1，第二个数字是2，以此类推。但是现在是有重复的值的，如果是排序好的数组，可以得出那个与索引不相等的值，一定是重复的。所以我们遍历数组并进行交换，使得索引和值相互对应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果索引与值相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//进行下一个</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//索引与值不相等，看这个值原本应该在的位置对应的值与这个值是否相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果相等，就直接返回</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果这个值作为索引对应的值与这个值不相等，就交换这两个数，使得这个值跟索引一致</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//没有找到</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==================================================</p><p>解法3:</p><p>思路：数组排序之后判断相邻元素是否相等</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法二效率更高</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2022/02136013.html"/>
      <url>/2022/02136013.html</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式分为三种，分别是<code>简单工厂模式</code>，<code>工厂模式</code>和<code>抽象工厂模式</code>，由于简单工厂模式是工厂模式的一种特例，所以简单工厂属于工厂模式。所以有的时候也说工厂模式分为<code>工厂模式</code>和<code>抽象工厂模式</code>两种</p><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>场景：需要new对象的时候，不想直接new，因为可能会产生耦合，或者是对象构建过程非常<code>复杂</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/13/10:43 * @Description: */</span><span class="token comment" spellcheck="true">//抽象基类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一种产品类</span><span class="token keyword">class</span> <span class="token class-name">Product1</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是产品1该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二种产品类</span><span class="token keyword">class</span> <span class="token class-name">Product2</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是产品2该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//简单工厂方法类</span><span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Product <span class="token function">makeProduct</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        Product product <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>                product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>                product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Product product1 <span class="token operator">=</span> SimpleFactory<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product1<span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样test里面就不需要关心产品是怎么生成的，这在构建复杂产品的时候提供的便利。只需要传参即可。</p><p>缺点：每增加一个产品类，就需要修改工厂，违反开闭原则。</p><p>为了克服这个缺点，工厂模式就出来了</p><h3 id="工厂模式-1"><a href="#工厂模式-1" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>场景：和简单工厂一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/13/10:43 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Product1</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是产品1该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Product2</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是产品2该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象工厂类</span><span class="token keyword">interface</span> <span class="token class-name">ProductFactory</span><span class="token punctuation">{</span>    Product <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品1的工厂</span><span class="token keyword">class</span> <span class="token class-name">product1Factory</span> <span class="token keyword">implements</span>  <span class="token class-name">ProductFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Product <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品2的工厂</span><span class="token keyword">class</span> <span class="token class-name">product2Factory</span> <span class="token keyword">implements</span>  <span class="token class-name">ProductFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Product <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生产产品1</span>        ProductFactory pro1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">product1Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro1<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产产品2</span>        ProductFactory pro2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">product2Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro2<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂模式解决了简单工厂模式的缺点，当我们需要增加一个工厂类时，只需要添加一个类实现抽象工厂即可。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>场景:当我们需要多个产品族，每一个产品族里有一系列产品，这一系列产品一般是不变的，如果经常需要变动，可以使用工厂模式而非抽象工厂</p><p>例子：小米和华为是两个不同的产品族，他们里面有手机，电脑。我们需要生产他们</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/13/10:43 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory_Pattern</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电脑的抽象基类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MiComputer</span> <span class="token keyword">extends</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是小米电脑该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HComputer</span> <span class="token keyword">extends</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是华为电脑该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//手机的抽象基类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是小米手机该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是华为手机该做的事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在定义工厂时我们按照产品族来定义工厂</span><span class="token comment" spellcheck="true">//抽象工厂类</span><span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    Computer <span class="token function">makeComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Phone <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小米的工厂</span><span class="token keyword">class</span> <span class="token class-name">MiFactory</span> <span class="token keyword">implements</span>  <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Computer <span class="token function">makeComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//华为的工厂</span><span class="token keyword">class</span> <span class="token class-name">Hfactory</span> <span class="token keyword">implements</span>  <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Computer <span class="token function">makeComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//小米生产线</span>        AbstractFactory mifactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mifactory<span class="token punctuation">.</span><span class="token function">makeComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mifactory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//华为生产线</span>        AbstractFactory hfactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hfactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hfactory<span class="token punctuation">.</span><span class="token function">makeComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hfactory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们需要增加产品族的时候，需要添加一个类实现抽象工厂，再添加他们旗下的产品。</p><p>此文仅作为本人学习笔记使用</p><p><code>ps</code>:如果对象非常简单的话，或者是只需要通过new就可以创建的对象,就不需要使用工厂模式，如果要用的话还需要引入工厂类，增加系统复杂度</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左旋转字符串</title>
      <link href="/2022/021211018.html"/>
      <url>/2022/021211018.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/021211018/1644675473116.png" class title="左旋转字符串"></em></p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取得从n开始之后的值+0-n的值</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>===========================================================</p><p>解法2：</p><p>思路：反转</p><p> 例如：输入: s = “abcdef”, n= 2</p><pre><code>     以第二个数为分界线，两边都反转得到&quot;ba fedc&quot;</code></pre><p>​        将全部反转得到”cdef ab“</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为字符串不可变，我们需要转换</span>        <span class="token comment" spellcheck="true">//toCharArray() 方法将字符串转换为字符数组。</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两边反转</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>n<span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//整体反转</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换空格</title>
      <link href="/2022/021212603.html"/>
      <url>/2022/021212603.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/021212603/1644655465036.png" class title="替换空格"></em></p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用函数库解决</p><p>=======================================================</p><p>解法2：(推荐)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个字符串长度三倍的字符数组，保证可以放下所有的字符</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化size</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历原数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//charAt(i)表示取出字符串中第i个字符，如果等于空格的话，让他之后的三个分别是%20</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不是空格就复制原有的字符</span>               array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//新建一个字符串，内容为array，从第0个开始，截取size个字符构建字符串</span>        String newStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2022/021129711.html"/>
      <url>/2022/021129711.html</url>
      
        <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>类型：创建型</p><p>使用场景：当实体类的构造函数的参数超过4个，并且其中有一些可选的参数时，可以使用</p><p>以前我们遇到有可选参数的对象实例化时，通常有这两种方式：</p><p>1.折叠构造器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/12/11:11 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Builder_pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//必填</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//选填</span>    <span class="token keyword">private</span> String c<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> d<span class="token punctuation">;</span>    <span class="token keyword">private</span> String e<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span>String c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span>String c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span>String c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">,</span>String e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        String c <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//至少需要两个参数a,b</span>        Builder_pattern test1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Builder_pattern</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        Builder_pattern test2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Builder_pattern</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>评价：这种方法传参的时候容易传混。</p><p>2.JavaBean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/12/11:11 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Builder_pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//必填</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//必填</span>    <span class="token keyword">private</span> String c<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> d<span class="token punctuation">;</span>    <span class="token keyword">private</span> String e<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setC</span><span class="token punctuation">(</span>String c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setD</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setE</span><span class="token punctuation">(</span>String e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> String c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">,</span> String e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        String c <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span>        Builder_pattern builder_pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Builder_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder_pattern<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder_pattern<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder_pattern<span class="token punctuation">.</span><span class="token function">setC</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>评价：JavaBean的方式如果属性过多，那么就要写一堆set，繁琐而且容易出错，并且是不安全的因为  实例化对象的行为不在同一状态(不理解)。</p><p>最终我们决定使用<code>建造者模式</code> </p><h3 id="建造者模式实现方式"><a href="#建造者模式实现方式" class="headerlink" title="建造者模式实现方式"></a>建造者模式实现方式</h3><p>1.在实体类中创建一个静态内部类，将实体类中的参数复制到静态内部类中</p><p>2.在实体类中创建一个私有的构造函数,参数为刚创建的静态内部类的类型</p><p>3.在静态内部类中创建公共的构造函数，参数为必填的属性</p><p>4.在静态内部类中设置函数，对实体类中可选的参数进行赋值，返回静态内部类的实例</p><p>5.在静态内部类中创建build()方法，在里面构建实体类并返回</p><p>具体代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/12/11:11 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Builder_pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//必填</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//必填</span>    <span class="token keyword">private</span> String c<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> d<span class="token punctuation">;</span>    <span class="token keyword">private</span> String e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造器，参数是Builder</span>    <span class="token keyword">private</span> <span class="token function">Builder_pattern</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> builder<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> builder<span class="token punctuation">.</span>b<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> builder<span class="token punctuation">.</span>c<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> builder<span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> builder<span class="token punctuation">.</span>e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>                <span class="token keyword">private</span> String a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//必填</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//必填</span>        <span class="token keyword">private</span> String c<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> d<span class="token punctuation">;</span>        <span class="token keyword">private</span> String e<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">setC</span><span class="token punctuation">(</span>String c<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构建完成之后返回自己</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">setD</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">setE</span><span class="token punctuation">(</span>String e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder_pattern <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder_pattern</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Builder_pattern test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Builder_pattern<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setC</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setD</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setE</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2022/021146132.html"/>
      <url>/2022/021146132.html</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>类型：创建型</p><p>单例模式的定义是： 某个类<code>只有一个实例</code>，且自行实例化并向整个系统提供此实例 </p><p>什么时候只需要一个实例呢，就比如a，b两个类都可以读取同一份配置并且需要对其修改，当a类new了一个实例之后对其进行了修改，这个时候b如果也new一个实例并且打印a刚才修改的配置，会打印出来什么呢，肯定是修改前的配置，因为配置并没有被修改，a修改的只是他new出来的对象的值，那么现在的需求要怎么实现呢？</p><p>方式一：将配置文件中的配置修改为静态，让每个类都可以调用</p><p>​                缺点：静态数据不会被gc回收，数据多时会严重<code>影响内存</code>；</p><p>方式二：保证a类和b类创建出来的对象是同一个并且是唯一的；这就需要单例模式</p><p>那么，怎么保证单例呢：1.自己在自己中创建对象，2.不让别人new，因为每次new都是创建新对象3.让别人可以                                            访问到自己创建的对象</p><h3 id="单例模式的写法："><a href="#单例模式的写法：" class="headerlink" title="单例模式的写法："></a>单例模式的写法：</h3><p>单例分为饿汉式和懒汉式，<code>饿汉式</code>指我提前创建好了实例，不管需不需要。<code>懒汉式</code>指你需要我才创建实例</p><p>共有五种写法：静态常量，单null，双null检查，静态内部类和枚举。</p><h4 id="1、静态常量"><a href="#1、静态常量" class="headerlink" title="1、静态常量"></a>1、静态常量</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> design_mode<span class="token punctuation">.</span>Singleton<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/11/10:46 * @Description: 单例模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_Pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton_Pattern a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供对外访问的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton_Pattern <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        Singleton_Pattern test <span class="token operator">=</span> Singleton_Pattern<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射获取对象</span>        <span class="token comment" spellcheck="true">//获得构造器并且不执行权限检查</span>        Constructor<span class="token operator">&lt;</span>Singleton_Pattern<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> Singleton_Pattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton_Pattern test1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-java"><code class="language-java">design_mode<span class="token punctuation">.</span>Singleton<span class="token punctuation">.</span>Singleton_Pattern<span class="token annotation punctuation">@16b98e56</span>design_mode<span class="token punctuation">.</span>Singleton<span class="token punctuation">.</span>Singleton_Pattern<span class="token annotation punctuation">@7ef20235</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以得出不是一个对象，单例被破坏。</p><p><code>评价</code>：因为它作为静态常量，在类加载的时候就已经执行了，所以提前创建好了实例，属于饿汉式，因为是静态只会执行一次，所以也是线程安全的。缺点是可以被反射创建实例。</p><p><code>ps:</code>前四种方法都可以被反射破坏</p><h4 id="2-单null检查"><a href="#2-单null检查" class="headerlink" title="2.单null检查"></a>2.单null检查</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/11/10:46 * @Description: 单例模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_Pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton_Pattern a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton_Pattern <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果a为null则创建一个对象a，如果不为null直接返回a</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用</span>        Singleton_Pattern<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>评价</code>：他是在调用这个方法的时候才执行的，属于懒汉式，缺点是线程不安全，比如线程1访问时进行16行的判断，在判断完成但是没有创建对象的时候，线程2进来了，他也判断a == null,也会创建对象，这也就破坏了单例模式。</p><p>有人说在判断之后加一个同步锁如下所示</p><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton_Pattern <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton_Pattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是问题依旧没用解决，当线程1进入判断，在锁之前，进程2进入判断，这个时候还没有创建对象，所以进程2判断也通过，然后进程1和2就会排队创建对象。</p><p>又有人说，在这个get方法上加锁就可以了，如下所示：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton_Pattern <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样是可以的，但是每次进入这个方法都需要排队，即使已经有了对象，get的时候也要被锁一下，极大的影响了性能。</p><p>这样就引出了另一种写法，双null检查</p><h4 id="3-双null检查"><a href="#3-双null检查" class="headerlink" title="3.双null检查"></a>3.双null检查</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/11/10:46 * @Description: 单例模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_Pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton_Pattern a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton_Pattern <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton_Pattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用</span>        Singleton_Pattern<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> volatile关键字可以阻止jvm的指令重排以及保证可见性</p><p><code>评价</code>：双null判断很好的解决了线程不安全问题和效率过低问题，当线程1进入的时候，如果已经有对象，则直接返回，如果没有的话进入锁，这个时候线程2也判断进入锁，他们会排队再进行一次判断，如果发现已经有对象，则返回，没有的话创建对象。(注意不要忘记volatile关键字)</p><p>====================</p><p><code>ps:</code>什么是指令重排：</p><p>​    在并发编程中，我们常常关注三个问题：原子性，可见性，有序性。这里我们主要说后两种</p><p>​            可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值</p><p>​            有序性指的是程序执行的顺序按照代码的先后顺序执行 。指令重排就会改变这种顺序，处理器为了提高程序运行效率，会对代码进行优化，也就是说，处理器会改变代码顺序，但是他会保证最终执行结果与代码按顺序执行的结果是一致的。</p><p>​        是怎么保证的呢:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//语句1</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//语句2</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//语句3</span>r <span class="token operator">=</span> a<span class="token operator">*</span>a<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//语句4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>他的执行顺序不可能是2143，因为4必须用到3的结果，这个时候处理器就会保证3在4之前执行,</p><p>指令重排看上去没有问题，但是在多线程情况下就可能会出错，例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程1:</span>context <span class="token operator">=</span> <span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//语句1</span>inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//语句2</span> <span class="token comment" spellcheck="true">//线程2:</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inited <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">doSomethingwithconfig</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线程1中语句1和语句2没有关联，所以可能是先执行的语句2，这个时候线程二检测inited等于true，然后执行dosome方法。但是context并没有值，这个时候程序就会出错。</p><p>参考 <a href="https://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析 - Matrix海子 - 博客园 (cnblogs.com)</a> </p><p>=====================</p><h4 id="4-静态内部类"><a href="#4-静态内部类" class="headerlink" title="4.静态内部类"></a>4.静态内部类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/11/10:46 * @Description: 单例模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_Pattern</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton_Pattern aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_Pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton_Pattern <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>aa<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton_Pattern<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>评价：</code>懒汉式，因为在访问时才会加载静态内部类，才会创建对象。static保证线程安全。</p><h4 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5.枚举"></a>5.枚举</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Author: 薛帅 * @Date: 2022/02/11/13:28 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton_pattern_enum <span class="token punctuation">{</span>        A<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">Singleton_pattern_enum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test1</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton_pattern_enum<span class="token punctuation">.</span>A<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>评价:</code>用了都说好，但是我不太会。另外只有他不会被反射破坏。</p><p>推荐使用：1，3，4，5</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> design_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂链表的复制</title>
      <link href="/2022/021036586.html"/>
      <url>/2022/021036586.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/021036586/1644479720152.png" class title="复杂链表的复制"></em></p><p>解法1:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {    int val;    Node next;    Node random;    public Node(int val) {        this.val = val;        this.next = null;        this.random = null;    }}*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Node <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从头结点开始</span>        Node cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//复制各个节点</span>            Node tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//原来1-2-3</span>            <span class="token comment" spellcheck="true">//现在是1和1的复制都指向2，类推</span>            tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将1指向1的复制，成为1-(1)-2</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//走向下一个节点</span>            cur <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//现在的链表是1-(1)-2-(2)-3-(3)-null，还有随机节点没有解决</span>        <span class="token comment" spellcheck="true">//解决的方法是：让自己的下一节点也就是复制节点指向自己的random节点的下一位</span>        <span class="token comment" spellcheck="true">//从头结点开始  </span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>random<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                 cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>random <span class="token operator">=</span> cur<span class="token punctuation">.</span>random<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//指向下一个原节点</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//现在只需要将得到的链表拆分就可以得到所复制的链表</span>        <span class="token comment" spellcheck="true">//我们需要的链表是从原链表的第二个节点开始的</span>        cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//pre就是我们得到的总的链表</span>        Node pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新链表的头节点</span>        Node res <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最后得到的pre就是原本的链表</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//原链表的最后一个节点</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将res返回</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2022/0130967.html"/>
      <url>/2022/0130967.html</url>
      
        <content type="html"><![CDATA[<p>题目</p><p><em><img src="/2022/0130967/1643545803488.png" class title="反转链表"></em></p><p>解法1    迭代:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前节点</span>        ListNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点</span>        ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义next指针指向当前节点的下一个节点</span>            ListNode next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前节点的next指向prev，即修改了指针的指向，将原本指向后方的指针指向了前方</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//prev和curr前进一位</span>            prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>====================================分割线==============================================</p><p>解法2  递归：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归方法</span>    <span class="token keyword">private</span> ListNode <span class="token function">recur</span><span class="token punctuation">(</span>ListNode cur<span class="token punctuation">,</span>ListNode pre<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//停止条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//递归</span>            ListNode res <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为本步在最后一个递归执行的时候才执行，所以是从内到外依次执行</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从尾到头打印链表</title>
      <link href="/2022/013058399.html"/>
      <url>/2022/013058399.html</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p><em><img src="/2022/013058399/1643532941773.png" class title="从头到尾打印链表"></em></p><p>解法1：链表是先进先出，而栈是先进后出，那么要实现链表的反序输出只需要将列表放入栈中依次弹出即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } * 题目已经提供了ListNode类 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>ListNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  ints<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>========================================分割线==========================================</p><p><em></em></p><p>解法2：递归。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } * 题目已经提供了ListNode类 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归添加，将链表里的值递归之后反向添加到列表中</span>    <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为添加操作在递归之后,所以是反序添加</span>        tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2022/012957550.html"/>
      <url>/2022/012957550.html</url>
      
        <content type="html"><![CDATA[<p><em><img src="/2022/012957550/1643465760893.png" class title="题目"></em></p><p>题目：</p><p>这个题目可能有点不好理解</p><p>给定的原始方法是这样的</p><p><em><img src="/2022/012957550/1643465832631.png" class></em></p><p>比如示例一：[“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]指的是执行这些方法的顺序，</p><p>​                        [[],[3],[],[]]指的是这些方法对应的参数，比如CQueue()不需要参数而appendTail需要一个整数</p><p>​                        输出：[null,null,3,-1]指的是执行完这个方法之后的返回值。</p><p>​                        流程：CQueue()创建了两个栈，返回null，appendTail()方法将3添加进队列，返回值为null，所以为null，deleteHead()删除了栈顶，也就是这个3，要求将这个值返回所以是3，再执行一次deleteHead()因为栈内没有数据，根据题目，应该返回-1.</p><p>题解：</p><p>【</p><p>ps:</p><p>为什么要使用LinkedList</p><p><em><img src="/2022/012957550/1643467667754.png" class title="使用LinkedList"></em></p><p>】</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个栈，一个执行添加,一个执行删除</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack1<span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//栈1只负责添加数据，当栈2为空时倒入</span>        stack1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果栈2为空并且栈1为空,则证明栈内无数据，返回-1，如果栈2为空1不为空,1弹出数据并且加到2中(1倒入2中)，此时栈2的顶部就是原来栈1的底部，返回栈2顶即可，如果栈二不为空，直接返回栈2的顶部</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              stack2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>        <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要模仿的是队列的先进先出，而栈是先进后出，用两个栈相互倒腾就可以实现队列，当栈2不为空的时候,说明先进的那一部分还没有删完，等删完之后再将栈1中的数据再倒入栈二中。</p><p><em><img src="/2022/012957550/1643467484244.png" class title="通过"></em></p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含min函数的栈</title>
      <link href="/2022/012963137.html"/>
      <url>/2022/012963137.html</url>
      
        <content type="html"><![CDATA[<p>题目:</p><p><em><img src="/2022/012963137/1643446564817.png" class title="题目"></em></p><p>其实就是实现一个带有返回最小值功能的栈;</p><p>解法1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个链表，首先是头</span>    <span class="token keyword">private</span> Node head<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//push为往栈里面存值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果链表为null，表示是头节点，定义一个链表给他，当前值和最小值都是x，下一个节点为null</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//当前节点不是头节点，定义一个Node，将三个值传进去，next为上一个节点</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>min<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//pop为弹出数据，当弹出一个数据时，将本节点的next赋值给head，head回到了上一个节点,</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//top为栈的顶部数据，即head的当前值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//min为最小值，即head的最小值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>min<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//节点类，里面包含当前值，当前最小值，以及下一个节点</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加上有参构造</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><img src="/2022/012963137/1643447210229.png" class title="解法一成功"></em></p><p>==================================分割线===============================================</p><p>解法2：</p><p>【ps：</p><p>add，push都可以向stack中添加元素。</p><p><strong>不同点：</strong></p><p>add是继承自Vector(有点像arraylist)的方法，且返回值类型是boolean。</p><p>push是Stack自身的方法，返回值类型是参数类型。</p><p>peek，pop都是返回栈顶元素。</p><p><strong>不同点：</strong><br>peek()函数返回栈顶的元素，但不弹出该栈顶元素。</p><p>pop()函数返回栈顶的元素，并且将该栈顶元素出栈。】</p><p>题解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义两个栈，一个是数据栈，一个是辅助栈，</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                A<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果b为空或者b的顶部数据大于等于x，就将x放入b，来保证b的栈顶是最小的，即b栈的作用就是求最小值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> B<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>            B<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当a弹出的时候，如果b的顶部数据等于a要弹出的数据，就将b顶也弹出，保证元素一致，因为上方是>=，所以也避免了重复数据造成的影响。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//a的栈顶就是顶部数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//b的栈顶就是最小数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> B<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><img src="/2022/012963137/1643462200855.png" class title="解法二成功"></em></p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue递归组件及其调用</title>
      <link href="/2022/01258935.html"/>
      <url>/2022/01258935.html</url>
      
        <content type="html"><![CDATA[<p>需求：递归显示数据</p><p>后端传过来的数据：</p><p><em><img src="/2022/01258935/1643120927280.png" class title="后端数据"></em></p><p>前端需要接收并将其递归显示</p><p>步骤，首先定义递归组件，在组件中自己使用自己</p><p><em><img src="/2022/01258935/1643120987300.png" class title="创建组件文件"></em></p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <ul>      <li v-for="item in treeData" :key="item.id">          <!-- 在遍历时使用数组本身,这里的item点后边的根据自己的需求写 -->          {{item.content}}          <!--  v-bind绑定组件的props的data为item.child-->          <!--自己使用自己并且定义结束条件，child就是后端传过来的数据的子数据 -->          <DefaultTree v-if="item.child" :treeData="item.child"></DefaultTree>      </li>  </ul></template><script>export default {    //给文件一个name属性,name属性便是之后调用的组件名    name:'DefaultTree',    //接收一个array类型的props    props:{        treeData: Array,    },}</script><style></style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><p>​    1.引入组件：import DefaultTree from ‘@/components/default-tree.vue’;</p><p>​    2.声明组件：components:{  DefaultTree ，},</p><p>​    3.获得数据/定义数据</p><p>​    4.使用标签</p><pre class="line-numbers language-vue"><code class="language-vue"><template><div><!-- 标签名就是调用的组件名，:treeData后面是需要展示的数据的数组 -->    <DefaultTree :treeData='qaList'></DefaultTree></div></template><script>//引入标签import DefaultTree from '@/components/default-tree.vue';import qaApi from '@/api/qa'export default {//声明组件components:{    DefaultTree,},data(){  return {      //数据   qaList:[]  }},created() {    this.allQa()},methods: {//获得数据 allQa(){      qaApi.showAllQa()        .then(response =>{          this.qaList = response.data.data.list        })    },},};</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><p><em><img src="/2022/01258935/1643121507621.png" class title="效果展示"></em></p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue获取路径参数以及跳转刷新</title>
      <link href="/2022/012263621.html"/>
      <url>/2022/012263621.html</url>
      
        <content type="html"><![CDATA[<p>1.获取到页面url上？后方参数：</p><pre class="line-numbers language-vue"><code class="language-vue">this.$route.query.search             search表示？后面的参数名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><img src="/2022/012263621/1642866591354.png" class title="vue获取路径参数"></em></p><p>获取到的值就是java</p><p>2.跳转页面之后刷新页面</p><p><em><img src="/2022/012263621/1642866678255.png" class title="vue跳转刷新"></em></p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按钮点击事件与失去焦点事件冲突问题</title>
      <link href="/2022/010928976.html"/>
      <url>/2022/010928976.html</url>
      
        <content type="html"><![CDATA[<p>出现原因：</p><p>输入框有两种状态：获得焦点，失去焦点，目前需要根据这两种状态做提交，但是当点击提交时，会默认失去焦点，造成冲突或者bug。</p><p>解决方法：给按钮添加mousedown事件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addComment()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>回复<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lh-reply-btn<span class="token punctuation">"</span></span> <span class="token attr-name">@mousedown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msevent()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现这个方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token function">msevent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个方法表示在鼠标移动到元素上方并摁下左键的同时执行的方法，</p><p>event.preventDefault();的作用是阻止元素发生默认的行为。即输入框不会执行失去焦点的方法。</p><hr><p>在实现禁用a标签跳转时用到了此方法，但是加入@mousedown无效，直接在@click中event.preventDefault();可以。</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue点击一个元素，使指定输入框获得焦点</title>
      <link href="/2022/010943943.html"/>
      <url>/2022/010943943.html</url>
      
        <content type="html"><![CDATA[<p>在做评论回复功能时，需要实现点击评论，传送到输入框并使输入框获得焦点：</p><p>步骤：1.在输入框或者文本框的标签中添加<code>ref:“”</code>属性，例如：</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment.content<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入您要评论的文字<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commentContent<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在评论的区域添加点击事件：</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(comment,index) in comments<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addCommentTwo()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下方js实现：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token function">addCommentTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> childMessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child    childMessage<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><p><em><img src="/2022/010943943/1641719672888.png" class title="点击评论区域"></em></p><p><em><img src="/2022/010943943/1641719720604.png" class title="跳转到输入框并且输入框获得焦点"></em></p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No fallback instance of type</title>
      <link href="/2022/010750003.html"/>
      <url>/2022/010750003.html</url>
      
        <content type="html"><![CDATA[<p>使用spring cloud 的fegin进行远程调用时，编译出错，报错信息如下：</p><pre><code>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;eduCommentController&#39;: Unsatisfied dependency expressed through field &#39;commentClient&#39;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;com.xueshuai.eduservice.client.CommentClient&#39;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallback instance of type class com.xueshuai.eduservice.client.CommentFileDegradeFeignClient found for feign client service-ucenter    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)    at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:397)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1429)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)    at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)    at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)    at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)    at com.xueshuai.eduservice.EduApplication.main(EduApplication.java:24)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;com.xueshuai.eduservice.client.CommentClient&#39;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallback instance of type class com.xueshuai.eduservice.client.CommentFileDegradeFeignClient found for feign client service-ucenter    at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:178)    at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:101)    at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1818)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getObjectForBeanInstance(AbstractAutowireCapableBeanFactory.java:1266)    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260)    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)    at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1510)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1467)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1250)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:636)    ... 19 common frames omittedCaused by: java.lang.IllegalStateException: No fallback instance of type class com.xueshuai.eduservice.client.CommentFileDegradeFeignClient found for feign client service-ucenter    at org.springframework.cloud.openfeign.HystrixTargeter.getFromContext(HystrixTargeter.java:81)    at org.springframework.cloud.openfeign.HystrixTargeter.targetWithFallback(HystrixTargeter.java:72)    at org.springframework.cloud.openfeign.HystrixTargeter.target(HystrixTargeter.java:49)    at org.springframework.cloud.openfeign.FeignClientFactoryBean.loadBalance(FeignClientFactoryBean.java:242)    at org.springframework.cloud.openfeign.FeignClientFactoryBean.getTarget(FeignClientFactoryBean.java:271)    at org.springframework.cloud.openfeign.FeignClientFactoryBean.getObject(FeignClientFactoryBean.java:251)    at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:171)    ... 30 common frames omitted</code></pre><p>解决方法：</p><p>查看消费者实现类或者接口中是否加上了@Component或者类似注解</p><p>加上之后编译通过：</p><p><em><img src="/2022/010750003/1641523960615.png" class title="编译通过"></em></p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos远程调用</title>
      <link href="/2022/010655535.html"/>
      <url>/2022/010655535.html</url>
      
        <content type="html"><![CDATA[<p>温习一下nacos远程调用方法的过程：</p><p>流程为： Nacos注册-使用feign进行远程调用</p><p>使用nacos之前需要进行下载和配置</p><p>下载地址： <a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a> </p><p> 下载版本：nacos-server-1.1.4.tar.gz或nacos-server-1.1.4.zip，解压任意目录即可 </p><p>​    启动文件\nacos-server-1.1.4\nacos\bin\startup.cmd(linux是sh)</p><p>在pom中配置</p><pre class="line-numbers language-pom"><code class="language-pom"><!--服务注册--><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId></dependency><!--调用--><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-openfeign</artifactId></dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-Nacos注册"><a href="#1-Nacos注册" class="headerlink" title="1.Nacos注册"></a>1.Nacos注册</h3><p>​    (1)找到<code>需要被调用方法</code>的模块（以下称为<code>生产者</code>）的application.properties，写入如下配置</p><pre class="line-numbers language-xml"><code class="language-xml">spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ps:如果是yml/yaml文件则按照其格式写入</p><p>这代表的是nacos的地址以及将该模块注册入nacos，将来查找服务时寻找的是：</p><pre class="line-numbers language-xml"><code class="language-xml">spring.application.name=service-ucenter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中的name值</p><p>(2)在生产者的启动类上加上注解： @EnableDiscoveryClient ，作用是让注册中心扫描到该服务</p><p>​    具体的例子：</p><p><em><img src="/2022/010655535/1641467757598.png" class title="nacos注册"></em></p><p>（3）查看nacos的控制台是否注册成功</p><p>​        端口号是8848，访问地址是  <a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a></p><p>​        账号密码都是nacos </p><p><em><img src="/2022/010655535/1641467934182.png" class title="nacos注册中心"></em></p><p>我们可以看到 service-ucenter 注册成功，名称就是spring.application.name=service-ucenter的name值</p><p><em><img src="/2022/010655535/1641468067412.png" class title="注册成功"></em></p><h3 id="2-使用feign进行远程调用"><a href="#2-使用feign进行远程调用" class="headerlink" title="2.使用feign进行远程调用"></a>2.使用feign进行远程调用</h3><p>注册成功之后，我们对其进行调用，以下称调用的模块为<code>消费者</code></p><p>​    首先是消费者的注册，配置文件与消费者相同，主启动类上的注解更换为 @EnableFeignClients </p><p>​    </p><p>调用：</p><p>创建接口，接口中用于调用，在接口上加入@FeignClient(name = “service-ucenter”,fallback = VodFileDegradeFeignClient.class)</p><p>name值和生产者的服务名一致，fallback值为本接口实现类.class。fallback为了进行熔断降级处理</p><p>加入@Component将其交给springboot托管。</p><p>接口中具体写法如图所示：</p><p><em><img src="/2022/010655535/1641470758792.png" class title="接口写法"></em></p><p>实现类实现只需return即可。(实现类也要加@Component或类似注解来交给spring)</p><p>之后在消费者中实例化之后就可以调用了。</p><p>ps：如果接口中使用了@PathVariable()注解，则里面必须加上参数，例如：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/eduService/courseFront/getCourseInfoOrder/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CourseWebVo <span class="token function">getCourseInfoOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片插入问题</title>
      <link href="/2021/123029046.html"/>
      <url>/2021/123029046.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo图片插入"><a href="#hexo图片插入" class="headerlink" title="hexo图片插入"></a>hexo图片插入</h1><p>​        最近在搭建博客时遇到了图片插入的问题，以下是遇到的一些坑和解决办法，</p><p>​        开始时根据 <a href="https://www.jianshu.com/p/f72aaad7b852">HEXO插入图片（详细版） - 简书 (jianshu.com)</a> 做了设置，图片显示正常，如果你根据这个可以显示出图片就不用看下边的了。</p><p>​        图片未显示，</p><p>​            <em><img src="/2021/123029046/1640878638739.png" class title="图片未显示"></em></p><p>​        f12查看路径：</p><p>​        <em><img src="/2021/123029046/1640878827594.png" class title="查看路径"></em></p><p>​        hexo经过hexo g -d 之后，会把生成的html页面放在public之下,如果配置了插件<code>hexo-asset-image</code>，则图片文件也会到public之中</p><p>​            我们来到public下的2021之中:</p><p>​        发现在浏览器中找到的是直接2021下的图片，而我们的图片在2021下的同名文件夹中，所以浏览器访问不到，这点没有解决，初步判断是由于<code>hexo-asset-image</code>生成图片文件夹的路径出错。（有解决的可以告诉我，感谢）</p><p>​            ps：如果你在过程中删除过插件，又重新下回来的话，记得根据 <a href="https://www.jianshu.com/p/f72aaad7b852">HEXO插入图片（详细版） - 简书 (jianshu.com)</a> 做好index.js中的配置，</p><p>​            所以，我们换一种方式，因为hexo是将md文件转换成html文件，但是在转换图片的时候出错，那么我们可以使用hexo推荐的图片插入方式：</p><p>​        </p><pre><code>*&#123;%asset_img 1.png examplename%&#125;*</code></pre><p>使用时请注意以下几点：</p><p>​    1.如果实在md文件中编辑，最前方和最后方都要加入<code>*</code>来进行转义，否则在进行hexo g -d的时候gitbash会报编译错误。</p><p>​    2.<code>%和asset_img中间没有空格</code>，之后加一个空格加上你的<code>图片名称</code>，不需要写路径，因为会创建一个同名文件夹会自动识别，然后加上空行加上图片的解释与%。</p><p>​    3,如果语法不对就会报编译错误</p><p>最终测试成功。虽然以后写着会比较麻烦，但是也算解决了。还有可能遇到的图片不显示的问题</p><p>的解决方法</p><p>1.可能由于插件原因，导致 图片不显示</p><p>​        我们去插件当中看看</p><p>位置在：你的博客\node_modules\hexo-asset-image\README.md</p><p><em><img src="/2021/123029046/1640880032686.png" class title="插件的请看我文档"></em></p><p>根据文档我们可以看出,如果你是使用的md的语法插入的图片，在（）小括号里只需要文件的名称而不需要文件的路径和名称，我们在md中将图片名称前面的路径删掉即可</p><p>​        ps：这点根据插件版本的不同而不同，请自行去自己插件中的<code>readme.md</code>查看。</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> question </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/2021/122348274.html"/>
      <url>/2021/122348274.html</url>
      
        <content type="html"><![CDATA[<p>有以下几种情况，一一排查，</p><p>1.nginx没有部署，当新增端口的时候，查看自己的nginx是否配了</p><p><em><img src="/2021/122348274/1640226469804.jpg" class title="配置nginx"></em></p><p>另：如果使用到文件上传，还需要加大小限制</p><p><em><img src="/2021/122348274/1640226512645.png" class title="配置nginx大小限制"></em></p><p>部署好之后重新启动nginx如果确定是nginx的原因，而重启nginx也没有用，尝试重启电脑</p><p>nginx重启命令：</p><pre class="line-numbers language-xml"><code class="language-xml">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.查看接口的方法名称，请求参数是否和前端api中一致</p><p>3.查看   <a href="http://suizuoa.top/2021/1222undefined.html">required_request_body_is_missing | 过客 (suizuoa.top)</a> </p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>required_request_body_is_missing</title>
      <link href="/2021/1222undefined.html"/>
      <url>/2021/1222undefined.html</url>
      
        <content type="html"><![CDATA[<p><em><img src="/2021/1222undefined/1640179907070.png" class title="错误信息"></em></p><p>当编写接口的时候，如果需要用到@requestBody注解的时候，上方就必须使用@postMapping进行修饰，否则就会报上述错误。</p><p>解决方法，将使用了@requestBody注解的接口改为用@postMapping</p><p>​    另：如果此接口被用于在vue中，在网页中会报跨域错误。</p><p>此文仅作为本人学习笔记使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/113016107.html"/>
      <url>/2021/113016107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
